/******************************************************************************** Copyright (c) 2011，中兴通讯股份有限公司，All rights reserved.* * 文件名称：lvm_manager.h* 文件标识：见配置管理计划书* 内容摘要：lvm磁盘管理类的定义文件* 当前版本：1.0* 作    者：王德恩* 完成日期：2011.08.05** 修改记录1：*    修改日期：2011.08.05*    版 本 号：V1.0*    修 改 人：王德恩*    修改内容：创建* 修改记录2：*    修改日期：2012.06.11*    版 本 号：V2.0*    修 改 人：yanwei*    修改内容：整改*******************************************************************************/#ifndef LVM_MANAGER_H#define LVM_MANAGER_H/*****************************************************************************************                                 头文件                                               *****************************************************************************************/#include "tecs_pub.h"#include "storage.h"/*****************************************************************************************                                 常量                                                  *****************************************************************************************/const string LVM_TECS_VGNAME    =  "tecs_vg1";     /*目前使用逻辑卷组名为tecs_vg1*/                                                                                                         const string LVM_TMP_PREFIX     =  "tmp_";         /*临时lv名前缀*/                                                                                                                    const string LVM_BASE_PREFIX    =  "base_";        /*base lv名前缀*/                                                                                                                        const string LVM_FREE_PREFIX    =  "free_";        /*空闲的base lv名前缀*/const string LVM_IMG_PREFIX     =  "i_";           /*快照 lv名前缀*/                                                                                                                        const string LVM_BLOCK_PREFIX   =  "lv_";          /*块 lv名前缀*/                                                                                                                          const string LVM_RESERVED_PREFIX = "r_";           /*预留lv名的前缀*/const string LVM_BACKUP_PREFIX  =  "b_";           /*备份lv名的前缀*/const int LVM_MAXDEV_ONEDISK    = 100;          /*每个硬盘最大分区数*/                                                                                                                   const int LVM_MBYTE             = (1024 * 1024);  /*M字节数*/    const int64 LVM_ALIGN_SIZE      = ((int64)4*LVM_MBYTE); /*lv块大小 lvm2存储空间管理的最小单位*//*****************************************************************************************                                 宏值                                                  *****************************************************************************************/#define             LVM_EXTENDADD                (int)0          //增加#define             LVM_EXTENDTO                 (int)1          //增加到/*****************************************************************************************                                 数据结构声明                                          *****************************************************************************************//**@brief 磁盘分区信息*/typedef struct tagDiskDevInfo{    string  sDiskName;                       //硬盘名称    string  sDevice;                         //分区名称    string  sBoot;                           //是否引导分区 * 表示引导分区    int     iStart;                          //分区从磁柱开始位置    int     iEnd;                            //分区从磁柱结束位置    int     iBlocks;                         //分区容量单位KB    string  sPlus;                           //分区容量是否有小数    int     iId;                             //分区类型    string  sSystem;}TDiskDevInfo;/**@brief 磁盘信息，包含分区信息*/typedef struct tagDiskTotalInfo{    string  sDiskName;                       //硬盘名称    float   fCapacity ;                      //硬盘容量    string  sCapacityUnit;                   //硬盘容量单位    long    lCapacityByte ;                  //硬盘容量(单位bytes)    string  sCapacityUnitBytes;              //硬盘容量单位bytes    int     iCylinder;                       //分区磁柱最大值    int     iUsedCylinder;                   //分区磁柱使用最大值    list<TDiskDevInfo> diskDevList;          //硬盘分区信息}TDiskTotalInfo;/**@brief  逻辑卷LV信息信息*/typedef struct tagTLVMLVInfo{    string  sLVName;          //逻辑卷LV名称    string  sLVPathName;      //逻辑卷LV名称全路径    string  sLVUUID;          //逻辑卷LV标识    uint32  uiCurrentLE;       //逻辑卷中LE的数量}TLVMLVInfo;/**@brief  逻辑卷组VG信息信息,包含组内逻辑卷LV信息*/typedef struct tagTLvmVGInfo{    string               sVGName;           //逻辑卷组名称    int                  iCurLVCnt;         //逻辑卷组中逻辑卷LV个数    int                  iCurPVCnt;         //逻辑卷组中物理分区PV个数    uint32               uiPESize;           //逻辑卷组中PE大小 默认值4 MB    string               sPESizeUnit;       //逻辑卷组中PE大小的单位 默认值MB    uint32               uiTotalPENum;       //逻辑卷组中PE的数量    uint32               uiAllocPENum;       //逻辑卷组中已经使用的PE数量    uint32               uiFreePENum;        //逻辑卷组中剩余可用的PE数量    string               sVGUUID;           //逻辑卷组标识    list<TLVMLVInfo>     lvmLVList;         //VG中LV信息列表}TLvmVgInfo;/*****************************************************************************************                                 对外接口声明                                          *****************************************************************************************//**************************************************************************//**@brief 功能描述:getVGTotalInfo 获取逻辑卷组VG相关空间信息@li @b 入参列表：@verbatim   无 @endverbatim@li @b 出参列表：@verbatim   TVGSpaceTotalInfo &resTVGSpaceTotalInfo :VG相关空间信息@endverbatim@li @b 返回值列表：@verbatim    成功 true    失败 false@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool getVGTotalInfo(TVGSpaceTotalInfo &tResVGSpaceTotalInfo);/**************************************************************************//**@brief 功能描述:获取base回收锁@li @b 入参列表：@verbatim   const string vgname 组名@endverbatim@li @b 出参列表：@verbatim   Mutex ** ppmutex 锁@endverbatim@li @b 返回值列表：@verbatim    SUCCESS -- 成功    ERROR -- 失败@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/int getLvMutex(Mutex ** ppmutex);/**************************************************************************//**@brief 功能描述:删除base回收锁@li @b 入参列表：@verbatim   const string vgname 组名@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    SUCCESS -- 成功    ERROR -- 失败@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/int removeLvMutex(const string &vgname);/**************************************************************************//**@brief 功能描述:构建lv全名@li @b 入参列表：@verbatim   string vg 组名   string name lv名@endverbatim@li @b 出参列表：@verbatim   string fullname lv全名@endverbatim@li @b 返回值列表：@verbatim    无@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/void fullnameofLV(const string &vg,const string &name,string &fullname);/**************************************************************************//**@brief 功能描述:回收tmplv@li @b 入参列表：@verbatim   无@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    true -- 成功    false -- 失败@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool recycleTmpLv(void);/**************************************************************************//**@brief 功能描述:释放不用的基础映像lv的空间@li @b 入参列表：@verbatim   string vgname    组名   uint32 needspace 所需的空间   int64 fileid base映像文件的文件号@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    true -- 回收到了满足条件的空间    false -- 没有回收到满足条件的空间@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool recycleBaseLV(const string &vgname,uint32 needspace,int64 fileid);/**************************************************************************//**@brief 功能描述:获取lv空间大小@li @b 入参列表：@verbatim   const string lvname lv名@endverbatim@li @b 出参列表：@verbatim   int64 & size lv大小 单位字节@endverbatim@li @b 返回值列表：@verbatim    无@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/void getsizeofLV(int64 &size,const string &vg,const string &lv);/**************************************************************************//**@brief 功能描述:renameLV lv重命名@li @b 入参列表：@verbatim   const string sResSource 源lv名   const string sResTarget 目的lv名@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    成功 true    失败 false@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool renameLV(const string & vg,const string &source,const string &target);/**************************************************************************//**@brief 功能描述:创建逻辑卷LV@li @b 入参列表：@verbatim      string lv :   待创建的lv名   string base:  基础lv名   int64 size:  LV容量的数值(单位B)[建议为(4194304B)的整数倍，实际分配LV空间为4194304B的整数倍]@endverbatim@li @b 出参列表：@verbatim   string &res:  LV路径@endverbatim@li @b 返回值列表：@verbatim    SUCCESS   成功    ERROR     其他原因失败    ERR_EXIST 逻辑卷LV名称已经被占用.    ERROR_NO_SPACE 容量越界    ERROR_INVALID_ARGUMENT 入参错误@endverbatim@li @b 接口限制：无@li @b 其它说明：如果base为空 则表示正常创建lv;如果base不为空 则表示创建base的快照    *//**************************************************************************/int createLV(const string &vg, const string &lv,const string &base, int64 size, string &res);/**************************************************************************//**@brief 功能描述:扩展逻辑卷LV容量@li @b 入参列表：@verbatim   int extendType :lv容量扩展类型，                   0:在LV上增加指定容量(增加:如原来1M,增加2M,最后总容量为3M)                   1:将LV容量扩展到指定容量(增加到:如原来1M,增加到2M,最后总容量为2M)   string sVGName :   LV所在逻辑卷组名称   string sLVName:   逻辑卷LV的名称   int64 i64LVCapacity:  LV容量的数值(单位B)          [建议为(4194304B)的整数倍，实际分配LV空间为4194304B的整数倍]@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    SUCCESS                  成功    ERROR                    其他原因失败    ERROR_INVALID_ARGUMENT   入参错误    ERROR_DEVICE_NOT_EXIST   逻辑卷LV名称不存在@endverbatim@li @b 接口限制：extendType为1时,LV容量扩展到指定容量要大于原来的容量。@li @b 其它说明：无    *//**************************************************************************/int extendLVCapacity(int extendType,                            const string & sVGName ,                            const string & sLVName ,                             int64 i64LVCapacity);/**************************************************************************//**@brief 功能描述:删除lv对应dm分区@li @b 入参列表：@verbatim    string lv:  逻辑卷LV的全名@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    SUCCESS                 成功    ERROR                   其他原因失败@endverbatim@li @b 接口限制：无@li @b 其它说明：    *//**************************************************************************/int deleteDmPartition(const string& lv);/**************************************************************************//**@brief 功能描述:删除逻辑卷LV@li @b 入参列表：@verbatim    string lv:  逻辑卷LV的全名@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    SUCCESS                 成功    ERROR                   其他原因失败    ERROR_DEVICE_NOT_EXIST  逻辑卷LV名称不存在    ERROR_INVALID_ARGUMENT  入参错误    ERROR_DEVICE_BUSY       设备忙@endverbatim@li @b 接口限制：无@li @b 其它说明：    *//**************************************************************************/int deleteLV(const string &lv);/**************************************************************************//**@brief 功能描述:删除逻辑卷LV@li @b 入参列表：@verbatim    string vg:   LV所在逻辑卷组名称    string lv:  逻辑卷LV的名称@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    SUCCESS                 成功    ERROR                   其他原因失败    ERROR_DEVICE_NOT_EXIST  逻辑卷LV名称不存在    ERROR_INVALID_ARGUMENT  入参错误    ERROR_DEVICE_BUSY       设备忙@endverbatim@li @b 接口限制：无@li @b 其它说明：    *//**************************************************************************/int deleteLV(const string & vg ,const string & lv);/**************************************************************************//**@brief 功能描述:generateDiskInfo 生成硬盘 磁盘信息@li @b 入参列表：@verbatim   无 @endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    成功 true    失败 false  （没有LVM分区，且没有剩余磁道可以进行LVM分区）@endverbatim@li @b 接口限制：无@li @b 其它说明：    如果没有lvm分区，HC存在可用分区空间，进行分区，HC会重启*//**************************************************************************/bool  generateDiskInfo();/**************************************************************************//**@brief 功能描述:获取硬盘名称接口@li @b 入参列表：@verbatim   无 @endverbatim@li @b 出参列表：@verbatim   list<string> &diskListInfo:硬盘名称@endverbatim@li @b 返回值列表：@verbatim    成功 true    失败 false   @endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool getDiskName(list<string> &diskListInfo);/**************************************************************************//**@brief 功能描述:判断某个lv是否有快照@li @b 入参列表：@verbatim   const string lv lv全名@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    true 存在，    false不存在@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool isExistSnapShot(const string &lv);/**************************************************************************//**@brief 功能描述:判断某个lv是否有快照@li @b 入参列表：@verbatim   const string &vg 组名   const string lv lv名@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    true 存在，    false不存在@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool isExistSnapShot(const string &vg,const string &lv);/**************************************************************************//**@brief 功能描述:获取一个base的快照个数@li @b 入参列表：@verbatim   const string lv lv全名@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    快照个数@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/int getSnapShotCount(const string &lv);/**************************************************************************//**@brief 功能描述:获取一个base的快照个数@li @b 入参列表：@verbatim   const string &vg 组名   const string lv lv名@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    快照个数@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/int getSnapShotCount(const string &vg,const string &lv);/**************************************************************************//**@brief 功能描述:判断VG组下是否已经存在的LV名称@li @b 入参列表：@verbatim   string lv ：lv全名@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    true 存在，    false不存在@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool isExistLVName(const string &lv);/**************************************************************************//**@brief 功能描述:判断VG组下是否已经存在的LV名称@li @b 入参列表：@verbatim   string vg : vg组名   string lv ：lv名称@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    true 存在，    false不存在@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool isExistLVName(const string &vg , const string &lv);/**************************************************************************//**@brief 功能描述:判断是否已经存在PV@li @b 入参列表：@verbatim   string sPVName ：PV名称@endverbatim@li @b 出参列表：@verbatim   无@endverbatim@li @b 返回值列表：@verbatim    true 存在，    false不存在@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool isExistPVName(const string &sPVName);/**************************************************************************//**@brief 功能描述:判断PV的VG 是否存在@li @b 入参列表：@verbatim   string sPVName ：PV名称      @endverbatim@li @b 出参列表：@verbatim   string sVGName ：VG名称@endverbatim@li @b 返回值列表：@verbatim    true 存在，    false不存在@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool isPVExistVGName(const string & sPVName , string  &sVGName);/**************************************************************************//**@brief 功能描述:获取当前组中可用容量@li @b 入参列表：@verbatim   无@endverbatim@li @b 出参列表：@verbatim   iLVCapacity:可用容量(MB)@endverbatim@li @b 返回值列表：@verbatim    true 成功，    false失败@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool  getVgFreeSpace(const string &sVGName,uint32 &iFreeSpace);/**************************************************************************//**@brief 功能描述:获取磁盘信息(包含LVM分区、及其他分区)@li @b 入参列表：@verbatim   无@endverbatim@li @b 出参列表：@verbatim   list<TDiskTotalInfo>  &diskTotalList :磁盘信息含所有分区   list<TDiskDevInfo>  &lvmDiskDevList :lvm分区信息   @endverbatim@li @b 返回值列表：@verbatim    true 成功，    false失败@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool getDiskInfo(list<TDiskTotalInfo>  &diskTotalList , list<TDiskDevInfo>  &lvmDiskDevList);/**************************************************************************//**@brief 功能描述:获取某个磁盘的分区信息@li @b 入参列表：@verbatim   sDevice:磁盘名称@endverbatim@li @b 出参列表：@verbatim   list<TDiskDevInfo>  &diskDevList :磁盘的分区信息   int &iUsedCylinder             :使用的磁道信息   @endverbatim@li @b 返回值列表：@verbatim    true 成功，    false失败@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool getDiskDevInfo(const string & sDevice ,                          list<TDiskDevInfo>  &diskDevList,                         int &iUsedCylinder);/**************************************************************************//**@brief 功能描述:获取逻辑卷组VG信息@li @b 入参列表：@verbatim   无@endverbatim@li @b 出参列表：@verbatim   list<TLvmVgInfo>    &lvmVGList:逻辑卷组VG信息   @endverbatim@li @b 返回值列表：@verbatim    true 成功，    false失败@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool getVGListInfo(list<TLvmVgInfo>    &lvmVGList);/**************************************************************************//**@brief 功能描述:获取逻辑卷LV信息@li @b 入参列表：@verbatim   无@endverbatim@li @b 出参列表：@verbatim   list<string>    &lvmLVNameList :逻辑卷LV名称列表   list<TLvmVgInfo>    &lvmVGList :返回卷组信息，并将获取的LV相关信息写入逻辑卷组中lvmVGList   @endverbatim@li @b 返回值列表：@verbatim    true 成功，    false失败@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/bool getLVListInfo(list<string>    &lvmLVNameList  ,list<TLvmVgInfo>    &lvmVGList);/**************************************************************************//**@brief 功能描述:根据lv的名字获取uuid@li @b 入参列表：@verbatim   lvname lv的名字@endverbatim@li @b 出参列表：@verbatim   vol_uuid lv的uuid@endverbatim@li @b 返回值列表：@verbatim    SUCCESS 成功，    其他 失败@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/STATUS getLVuuid(const string &vgname,const string &lvname,string &vol_uuid);/**************************************************************************//**@brief 功能描述:根据uuid获取lv的名字@li @b 入参列表：@verbatim   vol_uuid lv的uuid@endverbatim@li @b 出参列表：@verbatim   lvname lv的名字   @endverbatim@li @b 返回值列表：@verbatim    SUCCESS 成功，    其他 失败@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/STATUS getLVNameByUuid(string &lvname,const string &vol_uuid);/**************************************************************************//**@brief 功能描述:对“fdisk -l”命令返回的结果进行解析（按行解析）@li @b 入参列表：@verbatim   char *str “fdisk -l”命令返回的结果中的某一行   @endverbatim@li @b 出参列表：@verbatim    string *sDiskName：硬盘名称（disk时才输出）    list<TDiskTotalInfo> &diskResTotalList:硬盘信息列表@endverbatim@li @b 返回值列表：@verbatim    无@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/void analyseFdiskList(const char *str , string *sDiskName , list<TDiskTotalInfo> &diskResTotalList);/**************************************************************************//**@brief 功能描述:解析 lvdisplay | grep 'LV Name'，生成lv名称列表到全局变量lvmLVNameList@li @b 入参列表：@verbatim   char *str “lvdisplay”命令返回的结果中的某一行   @endverbatim@li @b 出参列表：@verbatim  string *psVGName :VG名称,  string *psLvFullName :LVname,   list<string> &lvmLVNameList :lv名称列表,  list<TLvmVgInfo>   &lvmVGList:逻辑卷组信息@endverbatim@li @b 返回值列表：@verbatim    无@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/void analyseLvdisplayLVName(const char *str,string *psVGName , string *psLvFullName , list<string> &lvmLVNameList , list<TLvmVgInfo>   &lvmVGList);/**************************************************************************//**@brief 功能描述:解析 vgdisplay，生成vg相关信息@li @b 入参列表：@verbatim   char *str “vgdisplay”命令返回的结果中的某一行   @endverbatim@li @b 出参列表：@verbatim  string *psVGName,:Lvm逻辑卷组name,  list<TLvmVgInfo>    &lvmVGList :Lvm逻辑卷组列表  @endverbatim@li @b 返回值列表：@verbatim    无@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/void analyseVgdisplay(const char *str, string *psVGName,list<TLvmVgInfo>    &lvmVGList); /**************************************************************************//**@brief 功能描述:解析 lvdisplay | grep '/dev/组名/lv_虚拟机ID_'  | awk '{  print $3 }'，生成虚拟机ID的DiskID信息@li @b 入参列表：@verbatim   char *str “vgdisplay”命令返回的结果中的某一行   @endverbatim@li @b 出参列表：@verbatim    list<uint32> &uiVMDiskIDList  虚拟机ID的DiskID信息 @endverbatim@li @b 返回值列表：@verbatim    无@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************/void analyseDiskIDList(const char *str, list<uint32> &uiVMDiskIDList); /**************************************************************************//**@brief 功能描述:对linux命令(如cat、fdisk等有输出信息的linux命令)进行执行，并返回输出结果@li @b 入参列表：@verbatim   command           要执行的linux命令(如cat、fdisk等有输出信息的linux命令)@endverbatim@li @b 出参列表：@verbatim    linux命令(如cat、fdisk等有输出信息的linux命令)，命令输出的结果@endverbatim@li @b 返回值列表：@verbatim   成功true   失败false@endverbatim@li @b 接口限制：无@li @b 其它说明：无*//**************************************************************************///对fdisk -l 解析，并输出List链表bool runCommandGetList(const string& command,list<TDiskTotalInfo> &diskTotalList);//对vgdisplay 进行解析获取信息保存到lvmVGListbool runCommandGetList(const string& command,list<TLvmVgInfo> &lvmVGList);//对lvdisplay命令进行执行，并输出lvmLVNameList,lvmVGList是入参也是出参bool runCommandGetList(const string& command,list<string> &lvmLVNameList , list<TLvmVgInfo> &lvmVGList);//解析 lvdisplay | grep '/dev/组名/lv_虚拟机ID_'  | awk '{  print $3 }'，生成虚拟机ID的DiskID信息bool runCommandGetList(const string& command,list<uint32> &uiVMDiskIDList);//创建lvm分区bool createLVMDisk(); //创建lvm分区脚本文件bool createLVMDiskScript();//激活所有的LVbool ActivateAllLV();//构造完整的lv设备名void fullnameofLV(const string &name,string &fullname);//lv大小对齐void alignsizeofLV(int64 &size);//回收不用的baselvbool recycleBaseLV(uint32 needspace,int64 fileid);//获取lv大小void getsizeofLV(int64 & size,const string &lv);//lv重命名bool renameLV(const string &source,const string &target);//创建lvint createLV(const string &lv, const string &base,int64 size, string &res);//删除lvint deleteLV(const string &lv,bool isfullname);//搜索lvint findLV(const string &tag,string &res);//判断lv是否存在bool isExistLVName(const string &lv,bool isfullname);//判断lv是否存在快照bool isExistSnapShot(const string &lv,bool isfullname);//获取一个baselv的快照个数int getSnapShotCount(const string &lv,bool isfullname);//获取vg组空闲空间大小bool  getVgFreeSpace(uint32 &iFreeSpace);bool doVgchange(const string &vg);#endif/* endof lvm_manager.h */