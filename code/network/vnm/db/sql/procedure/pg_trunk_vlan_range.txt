


-- physical port 添加 
-- Function: pf_net_add_pgtrunkvlanrange(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_pgtrunkvlanrange(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_pgtrunkvlanrange(in_uuid character varying, 
               in_vlan_begin integer,in_vlan_end integer )
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_same_pg integer;
  is_conflict integer;
  pgid numeric(19,0);
  is_exist integer; 
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
   
  -- uuid    
  SELECT count(*) INTO is_exist FROM port_group WHERE uuid = in_uuid;
  SELECT id INTO pgid FROM port_group WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
     return result;
  END IF;  
  
  SELECT count(*) INTO is_exist FROM pg_switchport_trunk WHERE pg_id = pgid;
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
     return result;
  END IF;  

  -- vlan check 
  IF in_vlan_begin > in_vlan_end THEN 
     result.ret := RTN_PARAM_INVALID;   -- item has not exist.
     return result;
  END IF;  

  IF in_vlan_begin < 0 THEN 
     result.ret := RTN_PARAM_INVALID;   -- item has not exist.
     return result;
  END IF;
  IF in_vlan_end < 0 THEN 
     result.ret := RTN_PARAM_INVALID;   -- item has not exist.
     return result;
  END IF;  
  IF in_vlan_begin > 4094 THEN 
     result.ret := RTN_PARAM_INVALID;   -- item has not exist.
     return result;
  END IF;
  IF in_vlan_end > 4094 THEN 
     result.ret := RTN_PARAM_INVALID;   -- item has not exist.
     return result;
  END IF;
      
  -- 不支持重复添加 
/*  
  -- 不能重叠设置
  SELECT count(*) INTO is_exist FROM pg_switchport_trunk_vlan_range WHERE pg_switchport_trunk_id = pgid 
       AND (( in_vlan_begin >= vlan_begin AND in_vlan_begin <= vlan_end ) OR 
           ( in_vlan_end >= vlan_begin AND in_vlan_end <= vlan_end ) OR 
           ( in_vlan_begin <= vlan_begin AND in_vlan_end >= vlan_end ) );
  IF is_exist > 0 THEN 
      result.ret := RTN_PARAM_INVALID;   -- item has not exist.
      return result;
  END IF;
*/  
   -- insert item
  result.id := nextval('serial_port_group_trunk_vlan_range');
  --result.uuid := in_uuid;
  
  BEGIN 
     INSERT INTO pg_switchport_trunk_vlan_range 
        values(result.id,pgid,in_vlan_begin,in_vlan_end);        
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_pgtrunkvlanrange(in_uuid character varying, 
               in_vlan_begin integer,in_vlan_end integer ) OWNER TO tecs;


-- port修改
-- Function: pf_net_modify_pgtrunkvlanrange(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_modify_pgtrunkvlanrange(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_modify_pgtrunkvlanrange(in_uuid character varying, 
               in_old_vlan_begin integer,in_old_vlan_end integer, in_new_vlan_begin integer,in_new_vlan_end integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  pgid numeric(19,0);
  pgtrunkvlanrangeid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
BEGIN
  result.ret := 0;
  
  -- 入参检查 后面做  
  -- uuid    
  SELECT count(*) INTO is_exist FROM port_group WHERE uuid = in_uuid;
  SELECT id INTO pgid FROM port_group WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
     return result;
  END IF;  
  
    SELECT count(*) INTO is_exist FROM pg_switchport_trunk WHERE pg_id = pgid;
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
     return result;
  END IF;  

  -- pg_switchport_trunk_vlan_range 
  SELECT count(*) INTO is_exist FROM pg_switchport_trunk_vlan_range WHERE pg_switchport_trunk_id = pgid 
        AND vlan_begin = in_old_vlan_begin AND vlan_end = in_old_vlan_end;
  SELECT id INTO pgtrunkvlanrangeid FROM pg_switchport_trunk_vlan_range WHERE pg_switchport_trunk_id = pgid 
        AND vlan_begin = in_old_vlan_begin AND vlan_end = in_old_vlan_end;        
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
     return result;
  END IF;  
  
  -- vlan check 
  IF in_new_vlan_begin > in_new_vlan_end THEN 
     result.ret := RTN_PARAM_INVALID;   -- item has not exist.
     return result;
  END IF;  
  IF in_new_vlan_begin < 0 THEN 
     result.ret := RTN_PARAM_INVALID;   -- item has not exist.
     return result;
  END IF;
  IF in_new_vlan_end < 0 THEN 
     result.ret := RTN_PARAM_INVALID;   -- item has not exist.
     return result;
  END IF;  
  IF in_new_vlan_begin > 4094 THEN 
     result.ret := RTN_PARAM_INVALID;   -- item has not exist.
     return result;
  END IF;
  IF in_new_vlan_end > 4094 THEN 
     result.ret := RTN_PARAM_INVALID;   -- item has not exist.
     return result;
  END IF;
            
  -- modify 不检查是否冲突，由应用保准  
  
  -- modify item
  result.id  := pgtrunkvlanrangeid;
  --result.uuid := in_uuid;
  BEGIN         
    UPDATE pg_switchport_trunk_vlan_range SET vlan_begin = in_new_vlan_begin, vlan_end = in_new_vlan_end     
          WHERE id = pgtrunkvlanrangeid ;   
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_modify_pgtrunkvlanrange(in_uuid character varying, 
               in_old_vlan_begin integer,in_old_vlan_end integer, in_new_vlan_begin integer,in_new_vlan_end integer) OWNER TO tecs;


-- 删除port

CREATE OR REPLACE FUNCTION pf_net_del_pgtrunkvlanrange(in_uuid character varying,in_vlan_begin integer,in_vlan_end integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  pgid numeric(19,0);
  pgtrunkvlanrangeid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- uuid    
  SELECT count(*) INTO is_exist FROM port_group WHERE uuid = in_uuid;
  SELECT id INTO pgid FROM port_group WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
     return result;
  END IF;  
  SELECT count(*) INTO is_exist FROM pg_switchport_trunk WHERE pg_id = pgid;
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
     return result;
  END IF; 

  -- pg_switchport_trunk_vlan_range 
  SELECT count(*) INTO is_exist FROM pg_switchport_trunk_vlan_range WHERE pg_switchport_trunk_id = pgid 
        AND vlan_begin = in_vlan_begin AND vlan_end = in_vlan_end;
  SELECT id INTO pgtrunkvlanrangeid FROM pg_switchport_trunk_vlan_range WHERE pg_switchport_trunk_id = pgid 
        AND vlan_begin = in_vlan_begin AND vlan_end = in_vlan_end;        
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
     return result;
  END IF;  
  
  -- del 不检查是否冲突，由应用保准  
  
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM pg_switchport_trunk_vlan_range WHERE id = pgtrunkvlanrangeid ;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_pgtrunkvlanrange(in_uuid character varying,in_vlan_begin integer,in_vlan_end integer) OWNER TO tecs;


-- 查询port group 的trunk vlan range 

CREATE OR REPLACE FUNCTION pf_net_query_pgtrunkvlanrange(in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    pgid numeric(19,0);
BEGIN
    SELECT count(*) into is_exist FROM port_group a, pg_switchport_trunk b WHERE a.id = b.pg_id AND a.switchport_mode = b.switchport_mode 
          AND a.uuid = in_uuid;
    SELECT id into pgid FROM port_group a, pg_switchport_trunk b WHERE a.id = b.pg_id AND a.switchport_mode = b.switchport_mode  
          AND a.uuid = in_uuid;
    IF is_exist <= 0 THEN 
       return ref;
    END IF;
    
    OPEN ref FOR SELECT in_uuid, vlan_begin, vlan_end FROM pg_switchport_trunk_vlan_range WHERE pg_switchport_trunk_id = pgid ORDER BY vlan_begin;
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_pgtrunkvlanrange(in_uuid character varying) OWNER TO tecs;







