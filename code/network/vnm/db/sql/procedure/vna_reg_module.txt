






--- 查询VNA reg module summary
--- 输出 name,uuid,
-- Function: pf_net_query_vna_reg_module_summary()

-- DROP FUNCTION pf_net_query_vna_reg_module_summary();

CREATE OR REPLACE FUNCTION pf_net_query_vna_reg_module_summary()
  RETURNS refcursor AS
$BODY$
DECLARE
        ref refcursor;
BEGIN
       OPEN ref FOR SELECT a.vna_uuid, b.module_uuid,b.module_name FROM vna a, regist_module b WHERE a.id = b.vna_id;
       RETURN ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vna_reg_module_summary() OWNER TO tecs;






-- 查询VNA reg mdoule
-- 输出 vna_uuid,module_uuid,module_name,role,is_online,cluster_name
-- Function: pf_net_query_vna_reg_module(character varying)

-- DROP FUNCTION pf_net_query_vna_reg_module(character varying);

CREATE OR REPLACE FUNCTION pf_net_query_vna_reg_module(in_module_uuid character varying)
  RETURNS t_vna_reg_module_query AS
$BODY$
DECLARE
  result  t_vna_reg_module_query;
  is_exist integer;
  RTN_ITEM_NO_EXIST integer :=4;
BEGIN
  result.ret := 0;
  SELECT count(*) INTO is_exist FROM regist_module WHERE module_uuid = $1;
  IF is_exist > 0 THEN
     result.ret := 0;
  ELSE
     result.ret := RTN_ITEM_NO_EXIST; -- no exist item
     return result;     
  END IF;

   SELECT vna_uuid into result.vna_uuid  FROM vna a, regist_module b WHERE module_uuid = $1 AND a.id = b.vna_id;
   SELECT module_name into result.module_name  FROM regist_module WHERE module_uuid = $1;
   SELECT module_uuid into result.module_uuid  FROM regist_module WHERE module_uuid = $1;
   SELECT role into result.role  FROM regist_module WHERE module_uuid = $1; 
   SELECT is_online into result.is_online  FROM regist_module WHERE module_uuid = $1;   
   
   SELECT count(*) into is_exist FROM regist_module a, hc_info b WHERE module_uuid = $1 AND a.id = b.regist_module_id;  
   IF is_exist <= 0 THEN 
       result.is_has_cluster := 0;
   ELSE 
       result.is_has_cluster := 1;
       SELECT cluster_name into result.cluster_name  FROM regist_module a, hc_info b WHERE module_uuid = $1 AND a.id = b.regist_module_id;   
   END IF;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vna_reg_module(character varying) OWNER TO tecs;



-- VNA reg module 添加 
-- Function: pf_net_add_vna_reg_module(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_vna_reg_module(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_vna_reg_module(in_vna_uuid character varying,in_module_uuid character varying, in_module_name character varying, in_role integer, 
              in_is_online integer, in_is_has_cluster integer,  in_cluster_name character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_same_hc integer;
  is_conflict integer;
  vnaid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否已存在相同记录
  -- check role
  IF in_role <= 0 THEN 
      result.ret := RTN_PARAM_INVALID; 
      return result;  
  END IF;
  
  IF in_role > 7 THEN 
      result.ret := RTN_PARAM_INVALID; 
      return result;  
  END IF;
  
  SELECT count(*) INTO is_same FROM regist_module a, vna b WHERE a.vna_id = b.id AND b.vna_uuid = $1 AND a.module_name = $3 AND a.role = $4 AND a.is_online = $5;  
  IF is_same > 0 THEN
     IF in_role = 1 THEN 
       SELECT count(*) INTO is_same_hc FROM regist_module a, hc_info c,vna b WHERE a.vna_id = b.id AND b.vna_uuid = $1 AND a.module_name = $3  AND a.id = c.regist_module_id AND cluster_name = in_cluster_name;
       IF is_same_hc > 0 THEN 
          result.ret := RTN_HAS_SAME_ITEM;   -- has same item
          SELECT a.id INTO result.id FROM regist_module a, vna b WHERE a.vna_id = b.id AND b.vna_uuid = $1 AND a.module_name = $3;
          SELECT a.module_uuid INTO result.uuid FROM regist_module a, vna b  WHERE a.vna_id = b.id AND b.vna_uuid = $1 AND a.module_name = $3;
          return result;
       END IF;
     ELSE
       result.ret := RTN_HAS_SAME_ITEM;   -- has same item
       SELECT a.id INTO result.id FROM regist_module a, vna b WHERE a.vna_id = b.id AND b.vna_uuid = $1 AND a.module_name = $3;
       SELECT a.module_uuid INTO result.uuid FROM regist_module a, vna b  WHERE a.vna_id = b.id AND b.vna_uuid = $1 AND a.module_name = $3;
       return result;
     END IF;
  END IF;

  -- vna uuid 是否存在  
  SELECT id into vnaid FROM vna WHERE vna_uuid = $1;
  SELECT count(*) INTO is_same FROM vna WHERE vna_uuid = $1;
  IF is_same = 0 THEN
     result.ret := RTN_ITEM_NO_EXIST;   -- vna uuid no exist
     return result;
  END IF;
  
  -- reg module 名称是否冲突
  SELECT count(*) INTO is_conflict FROM regist_module a, vna b WHERE a.vna_id = b.id AND b.vna_uuid = $1 AND a.module_name = $3 AND a.role = in_role;
  IF is_conflict > 0 THEN
     result.ret := RTN_ITEM_CONFLICT; -- conflict 
     return result;
  END IF;

  -- insert item
  result.id := nextval('serial_vna_regist_module');
  result.uuid := $2;
  BEGIN 
    INSERT INTO regist_module(id, vna_id, module_name,module_uuid,role,is_online) values(result.id,vnaid, in_module_name, in_module_uuid,in_role,in_is_online);
    IF in_role = 1 THEN 
       IF in_is_has_cluster = 1 THEN 
           INSERT INTO hc_info(regist_module_id,cluster_name,role)  values(result.id,in_cluster_name,in_role);
       END IF;
    END IF;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_vna_reg_module(in_vna_uuid character varying,in_module_uuid character varying, in_module_name character varying, in_role integer, 
              in_is_online integer, in_is_has_cluster integer,  in_cluster_name character varying) OWNER TO tecs;



-- vna修改
-- Function: pf_net_modify_vna_reg_module(in_vna_uuid character varying, in_vna_app character varying, in_vnm_app character varying,in_host_name character varying,in_os_name character varying, in_is_online integer)

-- DROP FUNCTION pf_net_modify_vna_reg_module(in_vna_uuid character varying, in_vna_app character varying, in_vnm_app character varying,in_host_name character varying,in_os_name character varying, in_is_online integer)

CREATE OR REPLACE FUNCTION pf_net_modify_vna_reg_module(in_vna_uuid character varying,in_module_uuid character varying, in_module_name character varying,
            in_role integer, in_is_online integer,in_is_has_cluster integer,in_cluster_name character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_same_hc integer;
  is_exist integer;
  is_exist_hc integer;
  regmoduleid numeric(19,0);
  vnaid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_NETPLANE_MTU_LESS_PG  integer := 5;
  RTN_PARAM_INVALID integer := 7;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否已存在相同记录
 
  -- check role
  IF in_role <= 0 THEN 
      result.ret := RTN_PARAM_INVALID; 
      return result;  
  END IF;
  
  IF in_role > 7 THEN 
      result.ret := RTN_PARAM_INVALID; 
      return result;  
  END IF;
 
  -- vna uuid module uuid是否存在  
  SELECT id into vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT count(*) INTO is_same FROM vna b,regist_module a WHERE a.vna_id = b.id AND b.vna_uuid = in_vna_uuid AND a.module_uuid = in_module_uuid;
  IF is_same = 0 THEN
     result.ret := RTN_ITEM_NO_EXIST;   -- vna uuid no exist
     return result;
  END IF;
  
  -- reg module 名称是否冲突
  -- vna uuid application
  SELECT count(*) INTO is_exist FROM vna a, regist_module b WHERE a.id = b.vna_id AND a.vna_uuid =in_vna_uuid AND b.module_uuid = in_module_uuid AND b.module_name = in_module_name  
     AND b.role = in_role;
  IF is_exist <= 0 THEN
     SELECT  count(*) INTO is_exist FROM vna a, regist_module b WHERE a.id = b.vna_id AND a.vna_uuid =in_vna_uuid AND b.module_name = in_module_name;
     IF is_exist > 0 THEN
       result.ret := RTN_ITEM_CONFLICT;-- netplane
       return result;          
     END IF;
  END IF;
     
  -- modify item
  BEGIN 
    SELECT b.id INTO result.id FROM vna a, regist_module b WHERE a.id = b.vna_id AND a.vna_uuid =in_vna_uuid AND b.module_uuid = in_module_uuid;
    result.uuid := in_module_uuid;    
    UPDATE regist_module SET module_name = in_module_name, role = in_role,  is_online = in_is_online WHERE module_uuid = in_module_uuid;

    IF in_is_has_cluster = 1 THEN
       SELECT count(*) INTO is_exist_hc FROM regist_module a, hc_info b WHERE a.id = b.regist_module_id AND a.module_uuid = in_module_uuid; 
       SELECT id INTO regmoduleid FROM regist_module WHERE module_uuid = in_module_uuid; 
       IF is_exist_hc > 0 THEN                  
          UPDATE hc_info SET role = in_role, cluster_name = in_cluster_name WHERE regist_module_id = regmoduleid;
       ELSE
          INSERT INTO hc_info(regist_module_id,cluster_name,role) values(regmoduleid, in_cluster_name,in_role);
       END IF;
    ELSE
       SELECT count(*) INTO is_exist_hc FROM regist_module a, hc_info b WHERE a.id = b.regist_module_id AND a.module_uuid = in_module_uuid; 
       SELECT a.id INTO regmoduleid FROM regist_module a, hc_info b WHERE a.id = b.regist_module_id AND a.module_uuid = in_module_uuid; 
       IF is_exist_hc > 0 THEN      
          DELETE FROM hc_info WHERE regist_module_id = regmoduleid;
       END IF;
    END IF;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_modify_vna_reg_module(in_vna_uuid character varying,in_module_uuid character varying, in_module_name character varying,
            in_role integer, in_is_online integer,in_is_has_cluster integer,in_cluster_name character varying) OWNER TO tecs;


-- 删除网络平面
-- Function: pf_net_del_vna_reg_module(character varying)

-- DROP FUNCTION pf_net_del_vna_reg_module(character varying);

CREATE OR REPLACE FUNCTION pf_net_del_vna_reg_module(in_module_uuid character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_exist integer;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否存在记录
  SELECT count(*) INTO is_exist FROM regist_module WHERE module_uuid = in_module_uuid ;  
  IF is_exist <= 0 THEN
     result.ret := RTN_ITEM_NO_EXIST;-- does not exist item
     return result;
  END IF;
    
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM regist_module WHERE module_uuid = in_module_uuid ;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_vna_reg_module(character varying) OWNER TO tecs;


