


-- 判断NETPLANE VLAN POOL 能否添加
CREATE OR REPLACE FUNCTION pf_net_check_add_vlanmap(in_project_id numeric(19,0),
                           in_pg_uuid character varying, 
                           in_vlan_num integer, in_isolate_no integer )
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  isolateno integer; 
  switchportmode  integer;
  pgid numeric(19,0);
  vlanid numeric(19,0);
  netplaneid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
  RTN_PARAM_INVALID integer := 7;
  RTN_PG_MUST_CFG_NETPLANE integer := 13;
  RTN_MUST_CFG_VALID_RANGE   integer := 14;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- pg uuid  
  -- vm pg, 必须是vm_pg private 
  SELECT count(*) INTO is_exist FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.uuid = in_pg_uuid AND a.pg_type = 21;
  SELECT a.id INTO pgid FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.uuid = in_pg_uuid AND a.pg_type = 21;
  SELECT a.switchport_mode INTO switchportmode FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.uuid = in_pg_uuid AND a.pg_type = 21;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
  
  -- pg uuid switchport_mode 必须是access 
  IF switchportmode = 1 THEN 
     result := 0;
  ELSE 
     result := RTN_PARAM_INVALID; 
     return result;
  END IF;
    
  -- 查看隔离域是否一致 
  SELECT count(*) INTO is_exist FROM pg_switchport_access_isolate WHERE pg_id = pgid; 
  SELECT isolate_no INTO isolateno FROM pg_switchport_access_isolate WHERE pg_id = pgid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;
  
  IF isolateno = in_isolate_no THEN 
     result := 0;
  ELSE 
     result := RTN_PARAM_INVALID; 
     return result;
  END IF;
  
  -- VLAN RANGE (2,4094)
  IF in_vlan_num < 2 THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
  IF in_vlan_num > 4094 THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
          
  -- 通过pd 获取pg的netplane id
  SELECT count(*) into is_exist FROM v_net_netplane_vmpg WHERE pg_uuid = in_pg_uuid;
  SELECT netplane_id into netplaneid FROM v_net_netplane_vmpg WHERE pg_uuid = in_pg_uuid;  
  IF is_exist <= 0 THEN 
     result := RTN_PG_MUST_CFG_NETPLANE; 
     return result;
  END IF;
      
  -- vlan pool 
  SELECT count(*) INTO is_exist FROM vlan_pool WHERE netplane_id = netplaneid  AND vlan_num = in_vlan_num ;
  SELECT id INTO vlanid FROM vlan_pool WHERE netplane_id = netplaneid  AND vlan_num = in_vlan_num ;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;
    
  -- vlan map 是否已存在project_id,pg_id, isolate_no 
  SELECT count(*) INTO is_exist FROM vlan_map WHERE project_id = in_project_id AND vm_pg_id = pgid AND isolate_no = in_isolate_no;
  IF is_exist > 0 THEN 
      SELECT count(*) INTO is_exist FROM vlan_map WHERE project_id = in_project_id AND vm_pg_id = pgid AND isolate_no = in_isolate_no AND vlan_id = vlanid;
      IF is_exist > 0 THEN 
          result := RTN_HAS_SAME_ITEM; 
          return result;
      ELSE          
          result := RTN_ITEM_CONFLICT; 
          return result;
      END IF;
  END IF;
  
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_add_vlanmap(in_project_id numeric(19,0),
                           in_pg_uuid character varying, 
                           in_vlan_num integer,in_isolate_no integer ) OWNER TO tecs;


-- VLAN MAP 添加 
-- Function: pf_net_add_vlanmap(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_vlanmap(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_vlanmap(in_project_id numeric(19,0),
                           in_pg_uuid character varying, 
                           in_vlan_num integer,in_isolate_no integer )
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_exist integer;
  is_conflict integer;
  pgid numeric(19,0);
  vlanid numeric(19,0);
  netplaneid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  result.ret := pf_net_check_add_vlanmap(in_project_id,in_pg_uuid,in_vlan_num,in_isolate_no);  
  -- 重复添加 直接返回
  IF result.ret = RTN_HAS_SAME_ITEM THEN      
     result.ret := 0;
     return result;
  END IF;
  IF result.ret > 0 THEN      
     return result;
  END IF;
  
  -- pg uuid  
  SELECT count(*) INTO is_exist FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.uuid = in_pg_uuid;
  SELECT a.id INTO pgid FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.uuid = in_pg_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
  
  -- 通过pd 获取pg的netplane id
  SELECT count(*) into is_exist FROM v_net_netplane_vmpg WHERE pg_uuid = in_pg_uuid;
  SELECT netplane_id into netplaneid FROM v_net_netplane_vmpg WHERE pg_uuid = in_pg_uuid;  
  IF is_exist <= 0 THEN 
     result := RTN_PG_MUST_CFG_NETPLANE; 
     return result;
  END IF;
  
  -- vlan pool 
  SELECT count(*) INTO is_exist FROM vlan_pool WHERE netplane_id = netplaneid  AND vlan_num = in_vlan_num ;
  SELECT id INTO vlanid FROM vlan_pool WHERE netplane_id = netplaneid  AND vlan_num = in_vlan_num ;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;
  

  -- insert item 
  result.id := nextval('serial_vlan_map');
  --result.uuid := in_uuid;
  BEGIN 
    INSERT INTO vlan_map(id,project_id,vm_pg_id,vlan_id,isolate_no) 
            values(result.id,in_project_id,pgid,vlanid,in_isolate_no);
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_vlanmap(in_project_id numeric(19,0),
                           in_pg_uuid character varying, 
                           in_vlan_num integer,in_isolate_no integer ) OWNER TO tecs;

                 


-- 判断NETPLANE VLAN POOL 能否删除
CREATE OR REPLACE FUNCTION pf_net_check_del_vlanmap(in_project_id numeric(19,0),
                           in_pg_uuid character varying, 
                           in_vlan_num integer,in_isolate_no integer  )
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  isolateno integer; 
  switchportmode integer; 
  pgid numeric(19,0);
  vlanid numeric(19,0);
  netplaneid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
  RTN_PARAM_INVALID integer := 7;
  RTN_PG_MUST_CFG_NETPLANE integer := 13;
  RTN_MUST_CFG_VALID_RANGE   integer := 14;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- pg uuid  
  -- vm pg, 必须是vm_pg private 
  SELECT count(*) INTO is_exist FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.uuid = in_pg_uuid AND a.pg_type = 21;
  SELECT a.id INTO pgid FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.uuid = in_pg_uuid AND a.pg_type = 21;
  SELECT a.switchport_mode INTO switchportmode FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.uuid = in_pg_uuid AND a.pg_type = 21;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
  
  -- pg uuid switchport_mode 必须是access 
  IF switchportmode = 1 THEN 
     result := 0;
  ELSE 
     result := RTN_PARAM_INVALID; 
     return result;
  END IF;
  
  -- 查看隔离域是否一致 
  SELECT count(*) INTO is_exist FROM pg_switchport_access_isolate WHERE pg_id = pgid; 
  SELECT isolate_no INTO isolateno FROM pg_switchport_access_isolate WHERE pg_id = pgid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;
  
  IF isolateno = in_isolate_no THEN 
     result := 0;
  ELSE 
     result := RTN_PARAM_INVALID; 
     return result;
  END IF;
  
  -- VLAN RANGE (2,4094)
  IF in_vlan_num < 2 THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
  IF in_vlan_num > 4094 THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
          
  -- 通过pd 获取pg的netplane id
  SELECT count(*) into is_exist FROM v_net_netplane_vmpg WHERE pg_uuid = in_pg_uuid;
  SELECT netplane_id into netplaneid FROM v_net_netplane_vmpg WHERE pg_uuid = in_pg_uuid;  
  IF is_exist <= 0 THEN 
     result := RTN_PG_MUST_CFG_NETPLANE; 
     return result;
  END IF;
  
      
  -- vlan pool 
  SELECT count(*) INTO is_exist FROM vlan_pool WHERE netplane_id = netplaneid  AND vlan_num = in_vlan_num ;
  SELECT id INTO vlanid FROM vlan_pool WHERE netplane_id = netplaneid  AND vlan_num = in_vlan_num ;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;
    
  -- vlan map 是否已存在project_id,pg_id 条目  
  SELECT count(*) INTO is_exist FROM vlan_map WHERE project_id = in_project_id  
                AND vm_pg_id = pgid AND vlan_id = vlanid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;
  
  -- 判断project id, vm_pg_id 是否还在使用  (vnic, vsi_profile)
  SELECT count(*) INTO is_exist FROM  vnic a, vsi_profile b, vm c WHERE 
          c.vm_id = a.vm_id AND a.vsi_profile_id = b.id 
         AND c.project_id = in_project_id AND vm_pg_id = pgid;
  IF is_exist > 0 THEN 
      result := RTN_RESOURCE_USING; 
      return result;
  END IF;
  
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_del_vlanmap(in_project_id numeric(19,0),
                           in_pg_uuid character varying, 
                           in_vlan_num integer,in_isolate_no integer  ) OWNER TO tecs;                 
                 

-- 删除 netplane vlan map
CREATE OR REPLACE FUNCTION pf_net_del_vlanmap(in_project_id numeric(19,0),
                           in_pg_uuid character varying, 
                           in_vlan_num integer ,in_isolate_no integer )
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  pgid numeric(19,0);
  vlanid numeric(19,0);
  netplaneid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- check del 
  result.ret := pf_net_check_del_vlanmap(in_project_id,in_pg_uuid,in_vlan_num,in_isolate_no);  
  IF result.ret > 0 THEN      
     return result;
  END IF;
  
  -- pg uuid  
  SELECT count(*) INTO is_exist FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.uuid = in_pg_uuid;
  SELECT a.id INTO pgid FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.uuid = in_pg_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
  
  -- 通过pd 获取pg的netplane id
  SELECT count(*) into is_exist FROM v_net_netplane_vmpg WHERE pg_uuid = in_pg_uuid;
  SELECT netplane_id into netplaneid FROM v_net_netplane_vmpg WHERE pg_uuid = in_pg_uuid;  
  IF is_exist <= 0 THEN 
     result := RTN_PG_MUST_CFG_NETPLANE; 
     return result;
  END IF;
  
  -- vlan pool 
  SELECT count(*) INTO is_exist FROM vlan_pool WHERE netplane_id = netplaneid  AND vlan_num = in_vlan_num ;
  SELECT id INTO vlanid FROM vlan_pool WHERE netplane_id = netplaneid  AND vlan_num = in_vlan_num ;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;
  
    
  SELECT count(*) INTO is_exist FROM vlan_map WHERE project_id = in_project_id  
                AND vm_pg_id = pgid AND vlan_id = vlanid;
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;                
  
    
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM vlan_map WHERE project_id = in_project_id  
                AND vm_pg_id = pgid AND vlan_id = vlanid;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_vlanmap(in_project_id numeric(19,0),
                           in_pg_uuid character varying, 
                           in_vlan_num integer,in_isolate_no integer  ) OWNER TO tecs;



-- 查询vlan_map(通过netplane_uuid)

CREATE OR REPLACE FUNCTION pf_net_query_vlanmap_by_projectid(in_project_id numeric(19))
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    netplaneid numeric(19,0);
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN  
    OPEN ref FOR SELECT netplane_uuid,netplane_name,pg_uuid,pg_name,project_id, vlan_num,isolate_no
       FROM v_net_vlanmap_netplane_pg_vlan   
       WHERE project_id = in_project_id;
    
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vlanmap_by_projectid(in_project_id numeric(19)) OWNER TO tecs;

-- 查询vlan_map(通过 vm pg uuid )
CREATE OR REPLACE FUNCTION pf_net_query_vlanmap_by_portgroup(in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    netplaneid numeric(19,0);
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    
    OPEN ref FOR SELECT netplane_uuid,netplane_name,pg_uuid,pg_name,project_id, vlan_num ,isolate_no
       FROM v_net_vlanmap_netplane_pg_vlan   
       WHERE pg_uuid = in_uuid;
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vlanmap_by_portgroup(in_uuid character varying) OWNER TO tecs;


-- 查询vlan_map(通过 vm pg uuid, project  )
CREATE OR REPLACE FUNCTION pf_net_query_vlanmap_by_projectid_and_pg(in_project_id numeric(19), in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    
    OPEN ref FOR SELECT netplane_uuid,netplane_name,pg_uuid,pg_name,project_id, vlan_num ,isolate_no
       FROM v_net_vlanmap_netplane_pg_vlan   
       WHERE project_id = in_project_id AND pg_uuid = in_uuid;
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vlanmap_by_projectid_and_pg(in_project_id numeric(19), in_uuid character varying) OWNER TO tecs;

-- 查询vlan_map(通过 project, isolate_no )
CREATE OR REPLACE FUNCTION pf_net_query_vlanmap_by_projectid_and_isolate(in_project_id numeric(19), in_isolate_no integer)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    
    OPEN ref FOR SELECT netplane_uuid,netplane_name,pg_uuid,pg_name,project_id, vlan_num ,isolate_no
       FROM v_net_vlanmap_netplane_pg_vlan   
       WHERE project_id = in_project_id AND isolate_no = in_isolate_no;
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vlanmap_by_projectid_and_isolate(in_project_id numeric(19), in_isolate_no integer) OWNER TO tecs;

-- 查询vlan_map(通过 netplane uuid )
CREATE OR REPLACE FUNCTION pf_net_query_vlanmap_by_netplane( in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    
    OPEN ref FOR SELECT netplane_uuid,netplane_name,pg_uuid,pg_name,project_id, vlan_num ,isolate_no
       FROM v_net_vlanmap_netplane_pg_vlan   
       WHERE  netplane_uuid = in_uuid;
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vlanmap_by_netplane( in_uuid character varying) OWNER TO tecs;


-- 查询vlan_map(通过 netplane uuid, project id, isolate no )
CREATE OR REPLACE FUNCTION pf_net_query_vlanmap_by_netplane_and_project_and_isolate( in_np_uuid character varying,in_project_id numeric(19), in_isolate_no integer)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    
    OPEN ref FOR SELECT netplane_uuid,netplane_name,pg_uuid,pg_name,project_id, vlan_num ,isolate_no
       FROM v_net_vlanmap_netplane_pg_vlan   
       WHERE  netplane_uuid = in_np_uuid AND 
	         project_id = in_project_id AND 
			 isolate_no = in_isolate_no;
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vlanmap_by_netplane_and_project_and_isolate( in_np_uuid character varying,in_project_id numeric(19), in_isolate_no integer) OWNER TO tecs;


                                 
                                 