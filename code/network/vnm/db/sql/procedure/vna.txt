






--- 查询VNA summary
--- 输出 name,uuid,
-- Function: pf_net_query_vna_summary()

-- DROP FUNCTION pf_net_query_vna_summary();

CREATE OR REPLACE FUNCTION pf_net_query_vna_summary()
  RETURNS refcursor AS
$BODY$
DECLARE
        ref refcursor;
BEGIN
       OPEN ref FOR SELECT vna_uuid,vna_application FROM vna;
       RETURN ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vna_summary() OWNER TO tecs;







-- 查询VNA 
-- 输出 uuid,name,description,mtu
-- Function: pf_net_query_vna(character varying)

-- DROP FUNCTION pf_net_query_vna(character varying);

CREATE OR REPLACE FUNCTION pf_net_query_vna(in_vna_uuid character varying)
  RETURNS t_vna_query AS
$BODY$
DECLARE
  result  t_vna_query;
  is_exist integer;
  RTN_ITEM_NO_EXIST integer :=4;
BEGIN
  result.ret := 0;
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = $1;
  IF is_exist > 0 THEN
     result.ret := 0;
  ELSE
     result.ret := RTN_ITEM_NO_EXIST; -- no exist item
     return result;     
  END IF;

   SELECT vna_uuid into result.uuid  FROM vna WHERE vna_uuid = $1;
   SELECT vna_application into result.vna_app  FROM vna WHERE vna_uuid = $1;
   SELECT vnm_application into result.vnm_app  FROM vna WHERE vna_uuid = $1;
   SELECT host_name into result.host_name  FROM vna WHERE vna_uuid = $1;
   SELECT os_name into result.os_name  FROM vna WHERE vna_uuid = $1;   
   SELECT is_online into result.is_online  FROM vna WHERE vna_uuid = $1;   
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vna(character varying) OWNER TO tecs;




-- VNA添加 
-- Function: pf_net_add_vna(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_vna(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_vna(in_vna_uuid character varying, in_vna_app character varying, in_vnm_app character varying,in_host_name character varying,in_os_name character varying, in_is_online integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_conflict integer;
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否已存在相同记录
  SELECT count(*) INTO is_same FROM vna WHERE vna_application = $2 AND vnm_application = $3 AND host_name = $4 AND os_name = $5 AND is_online = $6;  
  IF is_same > 0 THEN
     result.ret := RTN_HAS_SAME_ITEM;   -- has same item
     SELECT id INTO result.id FROM vna WHERE vna_application = $2;
     SELECT vna_uuid INTO result.uuid FROM vna WHERE vna_application = $2;
     return result;
  END IF;

  -- vna 名称是否冲突
  SELECT count(*) INTO is_conflict FROM vna WHERE vna_application = $2 ;
  IF is_conflict > 0 THEN
     result.ret := RTN_ITEM_CONFLICT; -- conflict 
     return result;
  END IF;

  -- insert item
  result.id := nextval('serial_vna');
  result.uuid := $1;
  BEGIN 
    INSERT INTO vna values(result.id,$1,$2,$3,$4,$5,$6);
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_vna(character varying,character varying,character varying,character varying, character varying, integer) OWNER TO tecs;



-- vna修改
-- Function: pf_net_modify_vna(in_vna_uuid character varying, in_vna_app character varying, in_vnm_app character varying,in_host_name character varying,in_os_name character varying, in_is_online integer)

-- DROP FUNCTION pf_net_modify_vna(in_vna_uuid character varying, in_vna_app character varying, in_vnm_app character varying,in_host_name character varying,in_os_name character varying, in_is_online integer)

CREATE OR REPLACE FUNCTION pf_net_modify_vna(in_vna_uuid character varying, in_vna_app character varying, in_vnm_app character varying,in_host_name character varying,in_os_name character varying, in_is_online integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_NETPLANE_MTU_LESS_PG  integer := 5;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否已存在相同记录
  SELECT count(*) INTO is_same FROM vna WHERE vna_uuid = $1 AND vna_application = $2 AND vnm_application = $3 AND host_name = $4 AND os_name = $5 AND is_online = $6;  
  IF is_same > 0 THEN
     result.ret := RTN_HAS_SAME_ITEM; -- same item
     SELECT id INTO result.id FROM vna WHERE vna_uuid = $1;
     return result;
  END IF;

  --  vna uuid记录是否存在
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = $1 ;
  IF is_exist <= 0 THEN
     result.ret := RTN_ITEM_NO_EXIST;-- don't exist item 
     return result;     
  END IF;
  
  -- vna uuid application
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = $1 AND vna_application = $2;
  IF is_exist <= 0 THEN
     SELECT count(*) INTO is_exist FROM vna WHERE vna_application = $2;
     IF is_exist > 0 THEN
       result.ret := RTN_ITEM_CONFLICT;-- netplane
       return result;          
     END IF;
  END IF;
  
  -- 
   
  -- modify item
  BEGIN 
    SELECT id INTO result.id FROM vna WHERE vna_uuid = $1;
    SELECT vna_uuid INTO result.uuid FROM vna WHERE vna_uuid = $1;    
    UPDATE vna SET vna_application = $2, vnm_application = $3,  host_name = $4 ,os_name = $5,is_online = $6 WHERE vna_uuid = $1 ;

    -- vna 离线后，将注册在此VNA上的MODULE is_online置为2
    IF $6 = 2 THEN 
        UPDATE regist_module SET is_online = 2 WHERE vna_id = result.id ;
    END IF;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_modify_vna(character varying, character varying, character varying,character varying, character varying, integer) OWNER TO tecs;


-- 删除网络平面
-- Function: pf_net_del_vna(character varying)

-- DROP FUNCTION pf_net_del_vna(character varying);

CREATE OR REPLACE FUNCTION pf_net_del_vna(in_uuid character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否存在记录
  SELECT count(*) INTO is_same FROM vna WHERE vna_uuid = $1 ;  
  IF is_same <= 0 THEN
     result.ret := RTN_ITEM_NO_EXIST;-- does not exist item
     return result;
  END IF;
    
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM vna WHERE vna_uuid = $1 ;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_vna(character varying) OWNER TO tecs;


