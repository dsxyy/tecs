


-- 判断通配switch 参数
CREATE OR REPLACE FUNCTION pf_net_check_param_wildcast_switch( in_uuid character varying, in_switch_name character varying, in_switch_type integer,
                 in_state integer, in_evb_mode integer,
                 in_uplinkpg_uuid character varying,in_mtu_max integer,in_nic_max_num integer, 
				 in_port_name character varying,in_port_type integer , in_port_bond_mode integer)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  uplinkpgid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_SWITCH_MTU_LESS_PG integer := 8;
  RTN_SWITCH_UPLINKPORT_INVALID integer := 9;
  RTN_PORT_HAS_JOIN_OTHER_SWITCH integer := 10;
  RTN_PG_MUST_CFG_NETPLANE   integer := 13;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- in_uplinkpg_uuid   
  SELECT count(*) INTO is_exist FROM port_group a, uplink_pg b WHERE a.id  = b.pg_id AND a.uuid = in_uplinkpg_uuid;
  SELECT id INTO uplinkpgid FROM port_group a, uplink_pg b WHERE a.id  = b.pg_id AND a.uuid = in_uplinkpg_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
  
  -- pg must cfg netplane
  SELECT count(*) INTO is_exist FROM port_group WHERE id = uplinkpgid AND netplane_id is not null;
  IF is_exist <= 0 THEN 
     result := RTN_PG_MUST_CFG_NETPLANE; 
     return result;
  END IF;  
  
  -- check switch_type
  IF in_switch_type < 1 THEN 
     result := RTN_PARAM_INVALID; 
     return result;
  END IF;
  
  IF in_switch_type > 2 THEN 
     result := RTN_PARAM_INVALID; 
     return result;
  END IF;
    
  -- check uplink port type
  IF in_port_type < 0 THEN 
     result := RTN_PARAM_INVALID; 
     return result;
  END IF;
  
  IF in_port_type > 1 THEN 
     IF in_port_type = 4 THEN
         result := 0;
     ELSE
         result := RTN_PARAM_INVALID; 
         return result;
     END IF;
  END IF;
  
  -- check uplink port bond mode 
  IF in_port_type = 1 THEN 
     IF in_port_bond_mode = 1 THEN 
         result := 0; 
     ELSE
         IF in_port_bond_mode = 4 THEN 
             result := 0; 
         ELSE             
             result := RTN_PARAM_INVALID; 
             return result;
         END IF;
     END IF;
  END IF;
              
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_param_wildcast_switch( in_uuid character varying, in_switch_name character varying, in_switch_type integer,
                 in_state integer, in_evb_mode integer,
                 in_uplinkpg_uuid character varying,in_mtu_max integer,in_nic_max_num integer, 
				 in_port_name character varying,in_port_type integer, in_port_bond_mode integer) OWNER TO tecs;


CREATE OR REPLACE FUNCTION pf_net_check_add_wildcast_switch( in_uuid character varying, in_switch_name character varying, in_switch_type integer,
                 in_state integer, in_evb_mode integer,
                 in_uplinkpg_uuid character varying,in_mtu_max integer,in_nic_max_num integer, 
				 in_port_name character varying,in_port_type integer , in_port_bond_mode integer)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  uplinkpgid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_SWITCH_MTU_LESS_PG integer := 8;
  RTN_SWITCH_UPLINKPORT_INVALID integer := 9;
  RTN_PORT_HAS_JOIN_OTHER_SWITCH integer := 10;
  RTN_PG_MUST_CFG_NETPLANE   integer := 13;
BEGIN
  result := 0;
  -- 入参检查 后面做
  result := pf_net_check_param_wildcast_switch(in_uuid,in_switch_name,in_switch_type,in_state,in_evb_mode,in_uplinkpg_uuid,
              in_mtu_max,in_nic_max_num,in_port_name,in_port_type,in_port_bond_mode);
  IF result > 0 THEN 
     return result;
  END IF;		  
			  
			  
  -- switch name 不能冲突
  SELECT count(*) INTO is_exist FROM wildcast_cfg_switch WHERE switch_name = in_switch_name;
  IF is_exist > 0 THEN 
      result := RTN_ITEM_CONFLICT;
      return result;
  END IF;
  

  -- port 
  IF in_port_type = 0 THEN 
      SELECT count(*) INTO is_exist FROM wildcast_cfg_switch_bond_map WHERE phy_port_name = in_port_name;
      IF is_exist > 0 THEN 
          result := RTN_ITEM_CONFLICT;
          return result;
      END IF;
  END IF;
  
  SELECT count(*) INTO is_exist FROM wildcast_cfg_switch WHERE switch_type = in_switch_type AND port_name = in_port_name AND in_port_name <> '';
  IF is_exist > 0 THEN 
      result := RTN_ITEM_CONFLICT;
      return result;
  END IF;
                
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_add_wildcast_switch( in_uuid character varying, in_switch_name character varying, in_switch_type integer,
                 in_state integer, in_evb_mode integer,
                 in_uplinkpg_uuid character varying,in_mtu_max integer,in_nic_max_num integer, 
				 in_port_name character varying,in_port_type integer, in_port_bond_mode integer) OWNER TO tecs;
				 
-- 逻辑kernel_report添加 
-- Function: pf_net_add_kernelreport(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_kernelreport(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_wildcast_switch( in_uuid character varying, in_switch_name character varying, in_switch_type integer,
                 in_state integer, in_evb_mode integer,
                 in_uplinkpg_uuid character varying,in_mtu_max integer,in_nic_max_num integer, 
				 in_port_name character varying,in_port_type integer, in_port_bond_mode integer) 
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_exist integer;
  is_conflict integer;
  vnaid numeric(19,0);
  uplinkpgid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  result.ret := pf_net_check_add_wildcast_switch(in_uuid,in_switch_name,in_switch_type,in_state,in_evb_mode,in_uplinkpg_uuid,in_mtu_max,in_nic_max_num,
                  in_port_name,in_port_type,in_port_bond_mode);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
  SELECT count(*) INTO is_exist FROM port_group a, uplink_pg b WHERE a.id  = b.pg_id AND a.uuid = in_uplinkpg_uuid;
  SELECT id INTO uplinkpgid FROM port_group a, uplink_pg b WHERE a.id  = b.pg_id AND a.uuid = in_uplinkpg_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
    
  -- 不支持重复添加 
  -- insert item 
  result.id := nextval('serial_wildcast_switch');
  --uplinkportid ：= nextval('serial_kernel_cfg_report_bond');
  result.uuid := in_uuid;
  BEGIN 
      INSERT INTO wildcast_cfg_switch(id,uuid,switch_name,switch_type, upg_id,mtu_max,nic_max_num, port_name, port_type,
	         state, evb_mode) 
          values(result.id,in_uuid,in_switch_name,in_switch_type,uplinkpgid,in_mtu_max,in_nic_max_num,in_port_name,in_port_type,
             in_state, in_evb_mode );
      
      -- insert uplink bond                  
      IF in_port_type = 1 THEN 
          INSERT INTO wildcast_cfg_switch_bond(wildcast_cfg_switch_id,port_type,bond_mode) 
             values(result.id, in_port_type,in_port_bond_mode);
      END IF;
      
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_wildcast_switch( in_uuid character varying, in_switch_name character varying, in_switch_type integer,
                 in_state integer, in_evb_mode integer,
                 in_uplinkpg_uuid character varying,in_mtu_max integer,in_nic_max_num integer, 
				 in_port_name character varying,in_port_type integer, in_port_bond_mode integer)  OWNER TO tecs;

                 

-- check modify        
CREATE OR REPLACE FUNCTION pf_net_check_modify_wildcast_switch( in_uuid character varying, in_switch_name character varying, in_switch_type integer,
                 in_state integer, in_evb_mode integer,
                 in_uplinkpg_uuid character varying,in_mtu_max integer,in_nic_max_num integer, 
				 in_port_name character varying,in_port_type integer, in_port_bond_mode integer)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  vnaid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
  RTN_PARAM_INVALID integer := 7;
  RTN_PG_MUST_CFG_NETPLANE   integer := 13;
BEGIN
  result := 0;
  -- 入参检查 后面做
  
  result := pf_net_check_param_wildcast_switch(in_uuid,in_switch_name,in_switch_type,in_state,in_evb_mode,in_uplinkpg_uuid,
              in_mtu_max,in_nic_max_num,in_port_name,in_port_type,in_port_bond_mode);
  IF result > 0 THEN 
     return result;
  END IF;		  
  
  -- 是否存在
  SELECT count(*) INTO is_exist FROM wildcast_cfg_switch WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
      result := RTN_ITEM_NO_EXIST;
      return result;
  END IF;	
			  
  -- switch name 不能冲突
  SELECT count(*) INTO is_exist FROM wildcast_cfg_switch WHERE uuid = in_uuid AND switch_name = in_switch_name;
  IF is_exist <= 0 THEN 
      SELECT count(*) INTO is_exist FROM wildcast_cfg_switch WHERE switch_name = in_switch_name;
      IF is_exist > 0 THEN 
          result := RTN_ITEM_CONFLICT;
          return result;
      END IF;
  END IF;
  
  -- port 
  IF in_port_type = 0 THEN 
      SELECT count(*) INTO is_exist FROM wildcast_cfg_switch_bond_map WHERE phy_port_name = in_port_name;
      IF is_exist > 0 THEN 
          result := RTN_ITEM_CONFLICT;
          return result;
      END IF;
  END IF;

  /*bond口时，所有名称都一样*/
  IF in_port_type = 0 AND in_port_name <> '' THEN 
      SELECT count(*) INTO is_exist FROM wildcast_cfg_switch WHERE uuid = in_uuid AND port_name = in_port_name;
      IF is_exist <= 0 THEN 
          SELECT count(*) INTO is_exist FROM wildcast_cfg_switch WHERE switch_type = in_switch_type AND port_name = in_port_name;
          IF is_exist > 0 THEN 
              result := RTN_ITEM_CONFLICT;
              return result;
          END IF;
      END IF;
  END IF;
   
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_modify_wildcast_switch( in_uuid character varying, in_switch_name character varying, in_switch_type integer,
                 in_state integer, in_evb_mode integer,
                 in_uplinkpg_uuid character varying,in_mtu_max integer,in_nic_max_num integer, 
				 in_port_name character varying,in_port_type integer, in_port_bond_mode integer) OWNER TO tecs;
                         


CREATE OR REPLACE FUNCTION pf_net_modify_wildcast_switch( in_uuid character varying, in_switch_name character varying, in_switch_type integer,
                 in_state integer, in_evb_mode integer,
                 in_uplinkpg_uuid character varying,in_mtu_max integer,in_nic_max_num integer, 
				 in_port_name character varying,in_port_type integer, in_port_bond_mode integer) 
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  uplinkpgid numeric(19,0);
  wcswitchid numeric(19,0);
  oldporttype integer;
  oldportname character varying;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_NETPLANE_MTU_LESS_PG  integer := 5;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  
  result.ret := pf_net_check_modify_wildcast_switch(in_uuid,in_switch_name,in_switch_type,in_state,in_evb_mode,in_uplinkpg_uuid,in_mtu_max,in_nic_max_num,
                  in_port_name,in_port_type,in_port_bond_mode);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
  SELECT count(*) INTO is_exist FROM port_group a, uplink_pg b WHERE a.id  = b.pg_id AND a.uuid = in_uplinkpg_uuid;
  SELECT id INTO uplinkpgid FROM port_group a, uplink_pg b WHERE a.id  = b.pg_id AND a.uuid = in_uplinkpg_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
    
  -- old uplink port type
  SELECT count(*) INTO is_exist FROM wildcast_cfg_switch WHERE uuid = in_uuid; 
  SELECT id INTO wcswitchid FROM wildcast_cfg_switch WHERE uuid = in_uuid; 
  SELECT port_type INTO oldporttype FROM wildcast_cfg_switch WHERE uuid = in_uuid; 
  SELECT port_name INTO oldportname FROM wildcast_cfg_switch WHERE uuid = in_uuid; 
  IF is_exist <= 0 THEN 
      result.ret := RTN_ITEM_NO_EXIST; 
      return result;
  END IF;
  
  -- modify item
  result.id  := wcswitchid;
  result.uuid := in_uuid;
  BEGIN   
    
    -- uplink bond ,需要将bond表删除
    IF oldporttype = 1 THEN 
        IF oldporttype = in_port_type THEN 
            IF oldportname = in_port_name THEN                 
                result.ret := 0;
            ELSE 
                DELETE FROM wildcast_cfg_switch_bond WHERE wildcast_cfg_switch_id =  wcswitchid;
            END IF;
        ELSE
            DELETE FROM wildcast_cfg_switch_bond WHERE wildcast_cfg_switch_id =  wcswitchid;
        END IF;
    END IF;
    
    UPDATE wildcast_cfg_switch SET switch_name = in_switch_name, switch_type = in_switch_type,upg_id = uplinkpgid, mtu_max = in_mtu_max,
           nic_max_num = in_nic_max_num,
           port_name = in_port_name, port_type = in_port_type,
		   state = in_state, evb_mode = in_evb_mode 
        WHERE uuid = in_uuid ;    
        
    -- modify uplink port         
    
    -- uplink bond ,不管是type or name变化，都需要将bond表删除
    IF oldporttype = 1 THEN 
        IF oldporttype = in_port_type THEN 
            IF oldportname = in_port_name THEN        
                UPDATE wildcast_cfg_switch_bond SET bond_mode = in_port_bond_mode WHERE wildcast_cfg_switch_id = wcswitchid;
            ELSE 
                INSERT INTO wildcast_cfg_switch_bond(wildcast_cfg_switch_id,port_type,bond_mode) 
                      values (wcswitchid, in_port_type, in_port_bond_mode);
            END IF;
        END IF;
    END IF;
    
    IF oldporttype = 0 THEN 
        IF in_port_type = 1 THEN 
               INSERT INTO wildcast_cfg_switch_bond(wildcast_cfg_switch_id,port_type,bond_mode) 
                values (wcswitchid, in_port_type, in_port_bond_mode);
        END IF;
    END IF;
    
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_modify_wildcast_switch( in_uuid character varying, in_switch_name character varying, in_switch_type integer,
                 in_state integer, in_evb_mode integer,
                 in_uplinkpg_uuid character varying,in_mtu_max integer,in_nic_max_num integer, 
				 in_port_name character varying,in_port_type integer, in_port_bond_mode integer)    OWNER TO tecs;

                                 
-- check switch_cfg_report del
CREATE OR REPLACE FUNCTION pf_net_check_del_wildcast_switch(in_uuid character varying)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  vnaid numeric(19,0);
  wcid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
  RTN_PARAM_INVALID integer := 7;
BEGIN
  result := 0;
  -- 入参检查 后面做
          
  --查询是否存在
  SELECT count(*) INTO is_exist FROM wildcast_cfg_switch WHERE uuid = in_uuid;
  SELECT id INTO wcid FROM wildcast_cfg_switch WHERE uuid = in_uuid;  
  IF is_exist <= 0 THEN 
      result := RTN_ITEM_NO_EXIST; 
      return result;
  END IF;

  /* task是否在使用 */
  SELECT count(*) INTO is_exist FROM wildcast_task_switch WHERE 
  wildcast_cfg_switch_id = wcid;   
  IF is_exist > 0 THEN
     result := RTN_WILDCAST_TASK_IS_USING;
     return result;
  END IF;
  
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_del_wildcast_switch(in_uuid character varying ) OWNER TO tecs;



CREATE OR REPLACE FUNCTION pf_net_del_wildcast_switch(in_uuid character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  vnaid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  result.ret := pf_net_check_del_wildcast_switch(in_uuid);
  IF result.ret > 0 THEN 
     return result;
  END IF;
      
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM wildcast_cfg_switch WHERE uuid = in_uuid;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_wildcast_switch(in_uuid character varying ) OWNER TO tecs;


-- 查询wildcast switch (通过uuid)


CREATE OR REPLACE FUNCTION pf_net_query_wildcast_switch(in_uuid character varying)
  RETURNS t_wildcast_switch_query AS
$BODY$
DECLARE
    result t_wildcast_switch_query;
    is_exist integer; 
    wcswitchid numeric(19,0);
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    result.ret := 0;
    
    -- vna uuid 
    SELECT count(*) INTO is_exist FROM wildcast_cfg_switch WHERE uuid = in_uuid;
    SELECT id INTO wcswitchid FROM wildcast_cfg_switch WHERE uuid = in_uuid;
    IF is_exist <= 0 THEN 
       result.ret := RTN_ITEM_NO_EXIST; 
       return result;
    END IF;  
      
    result.uuid  := in_uuid;
    SELECT switch_name INTO result.switch_name FROM  v_net_wildcast_switch WHERE uuid = in_uuid;
    SELECT switch_type INTO result.switch_type FROM  v_net_wildcast_switch WHERE uuid = in_uuid;
	SELECT state INTO result.state FROM  v_net_wildcast_switch WHERE uuid = in_uuid;
	SELECT evb_mode INTO result.evb_mode FROM  v_net_wildcast_switch WHERE uuid = in_uuid;
	
    SELECT pg_uuid INTO result.pg_uuid FROM  v_net_wildcast_switch WHERE uuid = in_uuid;
    SELECT mtu_max INTO result.mtu_max FROM  v_net_wildcast_switch WHERE uuid = in_uuid;
    SELECT nic_max_num INTO result.nic_max_num FROM  v_net_wildcast_switch WHERE uuid = in_uuid;
    SELECT port_name INTO result.port_name FROM  v_net_wildcast_switch WHERE uuid = in_uuid;
	SELECT port_type INTO result.port_type FROM  v_net_wildcast_switch WHERE uuid = in_uuid;
	SELECT bond_mode INTO result.bond_mode FROM  v_net_wildcast_switch WHERE uuid = in_uuid;
	
    return result;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_wildcast_switch(in_uuid character varying) OWNER TO tecs;



-- 查询wildcast switch
CREATE OR REPLACE FUNCTION pf_net_query_wildcast_switch_summary()
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    vnaid numeric(19,0);
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    
	OPEN ref FOR SELECT uuid,switch_name,switch_type,state, evb_mode, pg_uuid,mtu_max,nic_max_num,port_name,port_type,bond_mode FROM v_net_wildcast_switch ;
        
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_wildcast_switch_summary() OWNER TO tecs;
