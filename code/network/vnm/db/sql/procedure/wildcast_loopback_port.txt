






--- 查询wildcast loopback port 
--- 输出 
-- Function: pf_net_wildcast_loopback_port_summary()

-- DROP FUNCTION pf_net_wildcast_loopback_port_summary();

CREATE OR REPLACE FUNCTION pf_net_wildcast_loopback_port_summary()
  RETURNS refcursor AS
$BODY$
DECLARE
        ref refcursor;
BEGIN
       OPEN ref FOR SELECT uuid,port_name,is_loop FROM wildcast_cfg_loopback_port;
       RETURN ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_wildcast_loopback_port_summary() OWNER TO tecs;




-- 查询loopback port
-- 输出 
-- Function: pf_net_wildcast_query_loopback_port(character varying)

-- DROP FUNCTION pf_net_wildcast_query_loopback_port(character varying);

CREATE OR REPLACE FUNCTION pf_net_wildcast_query_loopback_port(in_uuid character varying)
  RETURNS t_wildcast_loopback_port_query AS
$BODY$
DECLARE
  result  t_wildcast_loopback_port_query;
  is_exist integer;
  RTN_ITEM_NO_EXIST integer :=4;
BEGIN
  result.ret := 0;
  SELECT count(*) INTO is_exist FROM wildcast_cfg_loopback_port WHERE uuid = in_uuid;
  IF is_exist > 0 THEN
     result.ret := 0;
  ELSE
     result.ret := RTN_ITEM_NO_EXIST; -- no exist item
     return result;     
  END IF;

   result.uuid := in_uuid;
   SELECT port_name into result.port_name  FROM wildcast_cfg_loopback_port WHERE uuid = in_uuid;
   SELECT is_loop into result.is_loop  FROM wildcast_cfg_loopback_port WHERE uuid = in_uuid;
        
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_wildcast_query_loopback_port(character varying) OWNER TO tecs;



-- 检查create virtual port 参数 
CREATE OR REPLACE FUNCTION pf_net_check_add_wildcast_loopback_port(in_uuid character varying, in_port_name character varying, in_is_loop integer)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_PG_MUST_CFG_NETPLANE integer := 13;
  RTN_MUST_CFG_VALID_RANGE   integer := 14;
BEGIN
  result := 0;
  -- 入参检查 后面做
  
      
  --port name 不能冲突
  SELECT count(*) into is_conflict FROM  wildcast_cfg_loopback_port WHERE port_name = in_port_name;  
  IF is_conflict > 0 THEN
     result := RTN_ITEM_CONFLICT; -- conflict 
     return result;
  END IF;
    
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_add_wildcast_loopback_port(in_uuid character varying, in_port_name character varying, in_is_loop integer) OWNER TO tecs;

		   
-- wildcast loopback port 添加 
-- Function: pf_net_add_wildcast_loopback_port(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_wildcast_loopback_port(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_wildcast_loopback_port(in_uuid character varying, in_port_name character varying, in_is_loop integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_same_hc integer;
  is_conflict integer;
  vnaid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否已存在相同记录

  -- 参数检查 
  result.ret := pf_net_check_add_wildcast_loopback_port(in_uuid, in_port_name, in_is_loop );
  IF result.ret > 0 THEN 
      return result;
  END IF;
      
  -- insert item
  result.id := nextval('serial_wildcast_loopback_port');
  result.uuid := in_uuid;
  BEGIN 
    INSERT INTO wildcast_cfg_loopback_port(id,uuid, port_name, is_loop) values(result.id,in_uuid, in_port_name, in_is_loop);

  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_wildcast_loopback_port(in_uuid character varying, in_port_name character varying, in_is_loop integer) OWNER TO tecs;



-- 检查create virtual port 参数 
CREATE OR REPLACE FUNCTION pf_net_check_modify_wildcast_loopback_port(in_uuid character varying, in_port_name character varying, in_is_loop integer)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_PG_MUST_CFG_NETPLANE integer := 13;
  RTN_MUST_CFG_VALID_RANGE   integer := 14;
BEGIN
  result := 0;
  -- 入参检查 后面做
  
  SELECT count(*) into is_exist FROM  wildcast_cfg_loopback_port WHERE uuid = in_uuid;  
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST;  
     return result;
  END IF;
  
  --port name 不能冲突
  SELECT count(*) into is_exist FROM  wildcast_cfg_loopback_port WHERE uuid = in_uuid AND  port_name = in_port_name;  
  IF is_exist <= 0 THEN 
      SELECT count(*) into is_conflict FROM  wildcast_cfg_loopback_port WHERE port_name = in_port_name;  
      IF is_conflict > 0 THEN
         result := RTN_ITEM_CONFLICT; -- conflict 
         return result;
      END IF;
  END IF;  
    
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_modify_wildcast_loopback_port(in_uuid character varying, in_port_name character varying, in_is_loop integer) OWNER TO tecs;

CREATE OR REPLACE FUNCTION pf_net_modify_wildcast_loopback_port(in_uuid character varying, in_port_name character varying, in_is_loop integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_same_hc integer;
  is_conflict integer;
  vnaid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否已存在相同记录

  -- 参数检查 
  result.ret := pf_net_check_modify_wildcast_loopback_port(in_uuid, in_port_name, in_is_loop );
  IF result.ret > 0 THEN 
      return result;
  END IF;
      
  -- update item
  --result.id := nextval('serial_wildcast_loopback_port');
  result.uuid := in_uuid;
  BEGIN 
    UPDATE wildcast_cfg_loopback_port SET port_name = in_port_name, is_loop = in_is_loop WHERE uuid = in_uuid;

  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_modify_wildcast_loopback_port(in_uuid character varying, in_port_name character varying, in_is_loop integer) OWNER TO tecs;



-- check loopback port
CREATE OR REPLACE FUNCTION pf_net_check_del_wildcast_loopback_port(in_uuid character varying) 
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  wcid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_PG_MUST_CFG_NETPLANE integer := 13;
  RTN_MUST_CFG_VALID_RANGE   integer := 14;
BEGIN
  result := 0;
  -- 入参检查 后面做
  
  SELECT count(*) into is_exist FROM  wildcast_cfg_loopback_port WHERE uuid = in_uuid;  
  SELECT id into wcid FROM  wildcast_cfg_loopback_port WHERE uuid = in_uuid;  
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST;  
     return result;
  END IF;
      
  /* task是否在使用 */
  SELECT count(*) INTO is_exist FROM wildcast_task_loopback WHERE 
  wildcast_cfg_loopback_port_id = wcid;   
  IF is_exist > 0 THEN
     result := RTN_WILDCAST_TASK_IS_USING;
     return result;
  END IF;
      
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_del_wildcast_loopback_port(in_uuid character varying) OWNER TO tecs;

-- 删除 
-- Function: pf_net_del_wildcast_loopback_port(character varying)

-- DROP FUNCTION pf_net_del_wildcast_loopback_port(character varying);

CREATE OR REPLACE FUNCTION pf_net_del_wildcast_loopback_port(in_uuid character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_exist integer;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否存在记录
  result.ret := pf_net_check_del_wildcast_loopback_port(in_uuid );
  IF result.ret > 0 THEN 
      return result;
  END IF;
    
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM wildcast_cfg_loopback_port WHERE uuid = in_uuid ;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_wildcast_loopback_port(character varying) OWNER TO tecs;


