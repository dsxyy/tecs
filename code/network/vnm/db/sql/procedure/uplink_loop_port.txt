

-- physical port 添加 
-- Function: pf_net_add_uplinkloopport(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_uplinkloopport(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_uplinkloopport(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer,
        in_is_port_cfg integer, in_is_consistency integer, 
        in_is_cfg integer )
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_same_port integer;
  is_same_port_ex integer;
  is_same_port_sriov integer;
  is_conflict integer;
  vnaid numeric(19,0);
  sriovportid numeric(19,0);
  portid numeric(19,0);
  is_exist integer; 
  db_uuid character varying;  
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- 检查vna uuid 是否有效
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;  
  
  
  -- 是否已存在相同记录
  SELECT count(*) INTO is_same_port FROM port WHERE port_type = in_type AND vna_id = vnaid  AND name = in_name AND state = in_state 
         AND is_broadcast = in_is_broadcast AND is_running = in_is_running AND is_multicast = in_is_multicast AND promiscuous = in_promiscuous 
         AND mtu = in_mtu AND is_master = in_is_master AND admin_state = in_admin_state AND is_online = in_is_online 
         AND is_cfg = in_is_port_cfg AND is_consistency = in_is_consistency ;         
  SELECT id INTO portid FROM port WHERE port_type = in_type AND vna_id = vnaid  AND name = in_name AND state = in_state 
         AND is_broadcast = in_is_broadcast AND is_running = in_is_running AND is_multicast = in_is_multicast AND promiscuous = in_promiscuous 
         AND mtu = in_mtu AND is_master = in_is_master AND admin_state = in_admin_state AND is_online = in_is_online 
         AND is_cfg = in_is_port_cfg AND is_consistency = in_is_consistency ;         
  SELECT uuid INTO db_uuid FROM port WHERE port_type = in_type AND vna_id = vnaid  AND name = in_name AND state = in_state 
         AND is_broadcast = in_is_broadcast AND is_running = in_is_running AND is_multicast = in_is_multicast AND promiscuous = in_promiscuous 
         AND mtu = in_mtu AND is_master = in_is_master AND admin_state = in_admin_state AND is_online = in_is_online 
         AND is_cfg = in_is_port_cfg AND is_consistency = in_is_consistency ;               
  IF is_same_port > 0 THEN 
     SELECT count(*) INTO is_same FROM uplink_loop_port WHERE port_id = portid AND  port_type = in_type AND vna_id = vnaid  
         AND is_cfg = in_is_cfg; 
     IF is_same > 0 THEN
            result.ret := RTN_HAS_SAME_ITEM;   -- has same item
            result.id  := portid;
            result.uuid := db_uuid;
            return result;
     ELSE
           result.ret := RTN_ITEM_CONFLICT; -- conflict 
           return result;            
     END IF;     
  END IF;

  -- port name 名称是否冲突
  SELECT count(*) INTO is_conflict FROM  port WHERE vna_id = vnaid  AND name = in_name ;
  IF is_conflict > 0 THEN
     result.ret := RTN_ITEM_CONFLICT; -- conflict 
     return result;
  END IF;
    
  -- insert item
  result.id := nextval('serial_port');
  result.uuid := in_uuid;
  
  BEGIN 
    INSERT INTO port values(result.id,in_type,vnaid,in_name,in_uuid,in_state,in_is_broadcast,in_is_running,in_is_multicast,in_promiscuous,in_mtu,in_is_master,in_admin_state,in_is_online,in_is_port_cfg, in_is_consistency);
    INSERT INTO uplink_loop_port values(result.id,vnaid,in_type,in_is_cfg);    
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_uplinkloopport(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer,
        in_is_port_cfg integer, in_is_consistency integer, 
        in_is_cfg integer ) OWNER TO tecs;


-- port修改
-- Function: pf_net_modify_uplinkloopport(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_modify_uplinkloopport(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_modify_uplinkloopport(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer,
        in_is_port_cfg integer, in_is_consistency integer, 
        in_is_cfg integer ) 
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  vnaid numeric(19,0);
  portid numeric(19,0);
  phyportid numeric(19,0);
  is_sriov_exist integer;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_NETPLANE_MTU_LESS_PG  integer := 5;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  -- 检查vna uuid 是否有效
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;  
  
  -- 检查port uuid 是否有效
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_uuid AND port_type = in_type;
  SELECT id INTO portid FROM port WHERE uuid = in_uuid AND port_type = in_type;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;   
  
  SELECT count(*) INTO is_exist FROM uplink_loop_port WHERE port_id = portid AND port_type = in_type AND vna_id = vnaid;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF; 
  
  -- port name 
  SELECT count(*) INTO is_exist FROM port WHERE vna_id = vnaid AND name = in_name AND uuid = in_uuid;
  IF is_exist <= 0 THEN
     SELECT count(*) INTO is_exist FROM port WHERE vna_id = vnaid AND name = in_name ;
     IF is_exist > 0 THEN
       result.ret := RTN_ITEM_CONFLICT;-- 
       return result;          
     END IF;
  END IF;  
                 
  -- modify item
  result.id  := portid;
  result.uuid := in_uuid;
  BEGIN 
    UPDATE port SET name = in_name, state = in_state, is_broadcast =in_is_broadcast, is_multicast = in_is_multicast,
        promiscuous = in_promiscuous, mtu = in_mtu, is_master = in_is_master, admin_state = in_admin_state, is_online = in_is_online ,
        is_cfg = in_is_port_cfg , is_consistency = in_is_consistency 
        WHERE uuid = in_uuid AND port_type = in_type;
    UPDATE uplink_loop_port SET is_cfg = in_is_cfg
        WHERE port_id = portid AND vna_id = vnaid AND port_type = in_type;            
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_modify_uplinkloopport(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer,
        in_is_port_cfg integer, in_is_consistency integer, 
        in_is_cfg integer )  OWNER TO tecs;


-- 判断是否能够删除uplink loop port 		
CREATE OR REPLACE FUNCTION pf_net_check_del_uplinkloopport(in_uuid character varying)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  portid numeric(19,0);
  is_exist integer; 
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- swtich uuid 
  SELECT count(*) INTO is_exist FROM port a, uplink_loop_port b WHERE a.id = b.port_id AND a.uuid = in_uuid;
  SELECT a.id INTO portid FROM port a, uplink_loop_port b WHERE a.id = b.port_id AND a.uuid = in_uuid;       
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  --如果swtich 已选用此uplink loop port 作为其uplink,将不能删除 
  SELECT count(*) INTO is_exist FROM virtual_switch_map WHERE port_id = portid;
  IF is_exist > 0 THEN 
      result := RTN_RESOURCE_USING;   
      return result;
  END IF;
  
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_del_uplinkloopport(in_uuid character varying) OWNER TO tecs;

-- 删除port

CREATE OR REPLACE FUNCTION pf_net_del_uplinkloopport(in_port_uuid character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否存在记录
  SELECT count(*) INTO is_exist FROM port a, uplink_loop_port b WHERE a.vna_id = b.vna_id AND a.id = b.port_id AND a.port_type = b.port_type AND a.uuid = in_port_uuid ;  
  IF is_exist <= 0 THEN
     result.ret := RTN_ITEM_NO_EXIST;-- does not exist item
     return result;
  END IF;

  result.ret := pf_net_check_del_uplinkloopport(in_port_uuid);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM port WHERE uuid = in_port_uuid ;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_uplinkloopport(character varying) OWNER TO tecs;


--- 查询phy port summary
--- 输出 name,uuid
-- Function: pf_net_query_sriovvfport_summary()

-- DROP FUNCTION pf_net_query_uplinkloopport_summary();

CREATE OR REPLACE FUNCTION pf_net_query_uplinkloopport_summary(in_vna_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
  ref refcursor;
  is_same integer;
  is_exist integer;
  vnaid numeric(19,0);
  phyportid numeric(19,0);
BEGIN
      -- vna 
      SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
      SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
      IF is_exist <= 0 THEN 
        return ref;
      END IF;
          
      -- 
      OPEN ref FOR SELECT in_vna_uuid, a.uuid, a.name, a.port_type FROM port a, uplink_loop_port b  WHERE a.id = b.port_id AND a.port_type = b.port_type AND a.vna_id = b.vna_id 
          AND a.vna_id = vnaid  ;      
      return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_uplinkloopport_summary(character varying) OWNER TO tecs;




-- 查询port 
-- 输出 uuid,name,description,mtu
-- Function: pf_net_query_uplinkloopport(character varying)

-- DROP FUNCTION pf_net_query_uplinkloopport(character varying);

CREATE OR REPLACE FUNCTION pf_net_query_uplinkloopport(in_port_uuid character varying)
  RETURNS t_uplinkloopport_query AS
$BODY$
DECLARE
  result  t_uplinkloopport_query;
  is_exist integer;
  uplinkloopportid numeric(19,0);
  RTN_ITEM_NO_EXIST integer :=4;
BEGIN
--  SELECT uuid into result.uuid, name into result.name,description into result.description,mtu into result.mtu FROM netplane WHERE uuid = $1;
  result.ret := 0;
  
  SELECT count(*) INTO is_exist FROM port a, uplink_loop_port b WHERE a.id = b.port_id AND a.port_type = b.port_type AND a.vna_id = b.vna_id 
           AND a.uuid = in_port_uuid ;
  SELECT a.id INTO uplinkloopportid FROM port a, uplink_loop_port b WHERE a.id = b.port_id AND a.port_type = b.port_type AND a.vna_id = b.vna_id 
           AND a.uuid = in_port_uuid ;
  IF is_exist <= 0 THEN   
     result.ret := RTN_ITEM_NO_EXIST; -- no exist item
     return result; 
  END IF;

   SELECT count(*) INTO is_exist FROM port a,vna b WHERE a.vna_id = b.id AND a.id = uplinkloopportid ;
   SELECT b.vna_uuid INTO result.vna_uuid FROM port a,vna b WHERE a.vna_id = b.id AND a.id = uplinkloopportid ;
   IF is_exist <= 0 THEN   
     result.ret := RTN_ITEM_NO_EXIST; -- no exist item
     return result; 
   END IF;
  
   result.uuid := in_port_uuid;
   -- port 
   SELECT port_type into result.port_type  FROM port WHERE uuid = in_port_uuid;
   SELECT name into result.name  FROM port WHERE uuid = in_port_uuid;
   SELECT state into result.state FROM port WHERE uuid = in_port_uuid;
   SELECT is_broadcast into result.is_broadcast  FROM port WHERE uuid = in_port_uuid;
   SELECT is_running into result.is_running  FROM port WHERE uuid = in_port_uuid;
   SELECT is_multicast into result.is_multicast  FROM port WHERE uuid = in_port_uuid;
   SELECT promiscuous into result.promiscuous  FROM port WHERE uuid = in_port_uuid;
   SELECT mtu into result.mtu  FROM port WHERE uuid = in_port_uuid;
   SELECT is_master into result.is_master  FROM port WHERE uuid = in_port_uuid;
   SELECT admin_state into result.admin_state  FROM port WHERE uuid = in_port_uuid;
   SELECT is_online into result.is_online  FROM port WHERE uuid = in_port_uuid;
   SELECT is_cfg into result.is_port_cfg  FROM port WHERE uuid = in_port_uuid;
   SELECT is_consistency into result.is_consistency  FROM port WHERE uuid = in_port_uuid;
   
   -- uplink loop port 
   SELECT is_cfg into result.is_cfg  FROM uplink_loop_port WHERE port_id = uplinkloopportid;
   
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_uplinkloopport(character varying) OWNER TO tecs;






