


-- 判断NETPLANE VLAN POOL 能否添加
CREATE OR REPLACE FUNCTION pf_net_check_add_netplane_vlanpool(in_uuid character varying, 
                           in_vlan_num integer )
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  netplaneid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_MUST_CFG_VALID_RANGE   integer := 14;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
  
  -- VLAN RANGE (2,4094)
  IF in_vlan_num < 2 THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
  IF in_vlan_num > 4094 THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
    
  -- vlan range 必须已经配置
  SELECT count(*) INTO is_exist FROM vlan_range WHERE netplane_id = netplaneid  
       AND ( in_vlan_num >= vlan_begin AND in_vlan_num <= vlan_end ) ;  
  IF is_exist <= 0 THEN 
     result := RTN_MUST_CFG_VALID_RANGE; 
     return result;
  END IF;  
  
  -- vlan pool 不能冲突
  SELECT count(*) INTO is_exist FROM vlan_pool WHERE netplane_id = netplaneid  AND vlan_num = in_vlan_num ;
  IF is_exist > 0 THEN 
     result := RTN_ITEM_CONFLICT; 
     return result;
  END IF;
  
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_add_netplane_vlanpool(in_uuid character varying, 
                           in_vlan_num integer ) OWNER TO tecs;


-- NETPLANE VLAN POOL 添加 
-- Function: pf_net_add_netplane_vlanpool(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_netplane_vlanpool(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_netplane_vlanpool(in_uuid character varying, 
                           in_vlan_num integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_exist integer;
  is_conflict integer;
  netplaneid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  result.ret := pf_net_check_add_netplane_vlanpool(in_uuid,in_vlan_num);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
   -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
    
  -- 不支持重复添加 

  -- insert item 
  result.id := nextval('serial_vlan_pool');
  --result.uuid := in_uuid;
  BEGIN 
    INSERT INTO vlan_pool(id,netplane_id,vlan_num) 
            values(result.id,netplaneid,in_vlan_num);
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_netplane_vlanpool(in_uuid character varying, 
                           in_vlan_num integer) OWNER TO tecs;

                 


-- 判断NETPLANE VLAN POOL 能否删除
CREATE OR REPLACE FUNCTION pf_net_check_del_netplane_vlanpool(in_uuid character varying, 
                           in_vlan_num integer )
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  vlanpoolid numeric(19,0);   
  netplaneid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
  RTN_PARAM_INVALID integer := 7;
  RTN_MUST_CFG_VALID_RANGE   integer := 14;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
  
  -- VLAN RANGE (2,4094)
  IF in_vlan_num < 2 THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
  IF in_vlan_num > 4094 THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
    
  SELECT count(*) INTO is_exist FROM vlan_pool WHERE netplane_id = netplaneid 
                AND vlan_num = in_vlan_num;
  SELECT id INTO vlanpoolid FROM vlan_pool WHERE netplane_id = netplaneid 
                AND vlan_num = in_vlan_num;            
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;                
  
  -- 查看该资源是否在使用
  SELECT count(*) INTO is_exist FROM vlan_map WHERE vlan_id = vlanpoolid;
  IF is_exist > 0 THEN 
     result := RTN_RESOURCE_USING; 
     return result;
  END IF;
      
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_del_netplane_vlanpool(in_uuid character varying, 
                           in_vlan_num integer ) OWNER TO tecs;
                 

-- 删除 netplane vlan pool
CREATE OR REPLACE FUNCTION pf_net_del_netplane_vlanpool(in_uuid character varying, 
                           in_vlan_num integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  netplaneid numeric(19,0);
  vlanpoolid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- del 不作检查，由应用保准  
  result.ret := pf_net_check_del_netplane_vlanpool(in_uuid,in_vlan_num);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
   -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
  
    
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM vlan_pool WHERE netplane_id = netplaneid 
                AND vlan_num = in_vlan_num;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_netplane_vlanpool(in_uuid character varying, 
                           in_vlan_num integer) OWNER TO tecs;



-- 查询vlan_pool(通过netplane_uuid)

CREATE OR REPLACE FUNCTION pf_net_query_netplane_vlanpool(in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    netplaneid numeric(19,0);
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
     -- netplane uuid 
    SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
    SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
    IF is_exist <= 0 THEN 
       --result := RTN_ITEM_NO_EXIST; 
       return ref;
    END IF;  
    
    SELECT count(*) INTO is_exist FROM vlan_pool  
      WHERE netplane_id = netplaneid;
    IF is_exist <= 0 THEN 
         --result := RTN_ITEM_NO_EXIST; 
         return ref;
    END IF; 
  
    OPEN ref FOR SELECT in_uuid, vlan_num 
      FROM vlan_pool  
      WHERE netplane_id = netplaneid;
    
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_netplane_vlanpool(in_uuid character varying) OWNER TO tecs;



-- 查询 netplane 下 vm_share access vlan 列表
CREATE OR REPLACE FUNCTION pf_net_query_vm_share_pg_access_list_by_netplane( in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    netplaneid numeric(19,0);
BEGIN
     -- netplane uuid 
    SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
    SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
    IF is_exist <= 0 THEN 
       --result := RTN_ITEM_NO_EXIST; 
       return ref;
    END IF;   
    
    OPEN ref FOR 
    SELECT vlan_num
    FROM port_group a,pg_switchport_access_vlan b 
    WHERE a.id = b.pg_id AND a.pg_type = 20 AND a.netplane_id = netplaneid;
    
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vm_share_pg_access_list_by_netplane( in_uuid character varying) OWNER TO tecs;


-- 查询 netplane 下 vm_share access vlan 列表
CREATE OR REPLACE FUNCTION pf_net_query_vm_share_pg_trunk_list_by_netplane( in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    netplaneid numeric(19,0);
BEGIN
     -- netplane uuid 
    SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
    SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
    IF is_exist <= 0 THEN 
       --result := RTN_ITEM_NO_EXIST; 
       return ref;
    END IF;   
    
    OPEN ref FOR 
    SELECT vlan_begin, vlan_end, native_vlan_num
    FROM port_group a,pg_switchport_trunk b, pg_switchport_trunk_vlan_range c
    WHERE a.id = b.pg_id AND b.pg_id = c.pg_switchport_trunk_id AND a.pg_type = 20 AND a.netplane_id = netplaneid;
    
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vm_share_pg_access_list_by_netplane( in_uuid character varying) OWNER TO tecs;


-- 查询 netplane 下 vm_private isolate no 列表
CREATE OR REPLACE FUNCTION pf_net_query_vm_private_pg_isolate_no_list_by_netplane( in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    netplaneid numeric(19,0);
BEGIN
     -- netplane uuid 
    SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
    SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
    IF is_exist <= 0 THEN 
       --result := RTN_ITEM_NO_EXIST; 
       return ref;
    END IF;   
    
    OPEN ref FOR 
    SELECT isolate_no
    FROM port_group a,pg_switchport_access_isolate b 
    WHERE a.id = b.pg_id AND a.pg_type = 21 AND a.netplane_id = netplaneid;
    
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vm_private_pg_isolate_no_list_by_netplane( in_uuid character varying) OWNER TO tecs;




                                 