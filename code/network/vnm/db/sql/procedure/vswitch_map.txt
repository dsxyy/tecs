
CREATE OR REPLACE FUNCTION pf_net_can_add_vswitchmap(in_vswitch_uuid character varying,in_port_uuid character varying)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  portid numeric(19,0);
  switchid numeric(19,0);
  porttype integer;
  switchtype integer;
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_SWITCH_MTU_LESS_PG integer := 8;
  RTN_SWITCH_UPLINKPORT_INVALID integer := 9;
  RTN_PORT_HAS_JOIN_OTHER_SWITCH integer := 10;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- swtich uuid 
  SELECT count(*) INTO is_exist FROM switch a, virtual_switch b WHERE a.id = b.switch_id AND a.switch_type = b.switch_type 
        AND a.uuid = in_vswitch_uuid;
  SELECT a.id INTO switchid FROM switch a, virtual_switch b WHERE a.id = b.switch_id AND a.switch_type = b.switch_type 
        AND a.uuid = in_vswitch_uuid;        
  SELECT a.switch_type INTO switchtype FROM switch a, virtual_switch b WHERE a.id = b.switch_id AND a.switch_type = b.switch_type 
        AND a.uuid = in_vswitch_uuid;    
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  --- port
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_port_uuid;
  SELECT id INTO portid FROM port WHERE uuid = in_port_uuid;
  SELECT port_type INTO porttype FROM port WHERE uuid = in_port_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
  
  -- port_type check 
  IF porttype = 2 THEN  -- sriov vf port;
     result := RTN_SWITCH_UPLINKPORT_INVALID; 
     return result;
  END IF;
  
  IF porttype = 2 THEN  -- kernel port(mgr, storage);
     result := RTN_SWITCH_UPLINKPORT_INVALID; 
     return result;
  END IF;
  
  -- same add 
  SELECT count(*) INTO is_exist FROM virtual_switch_map WHERE port_id = portid AND virtual_switch_id = switchid;
  IF is_exist > 0 THEN 
     result := 0; -- RTN_HAS_SAME_ITEM; 
     return result;  
  END IF;
  
  -- port 是否已在其他switch中
  -- 需考虑 sriov 网桥混用情况  
  SELECT count(*) INTO is_exist FROM v_net_switch_port_vna WHERE port_uuid = in_port_uuid AND switch_type = switchtype ;
  IF is_exist > 0 THEN 
     result := RTN_PORT_HAS_JOIN_OTHER_SWITCH; 
     return result;
  END IF;
  
  -- port 是否已经是bond的成员口
  SELECT count(*) INTO is_exist FROM bond_map WHERE physical_port_id = portid;
  IF is_exist > 0 THEN 
     result := RTN_ITEM_CONFLICT; 
     return result;
  END IF;
  
  -- port 需判断edvs 加入的网口是否是sriov网口，待bond完成后，完善。
    
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_can_add_vswitchmap(in_vswitch_uuid character varying,in_port_uuid character varying) OWNER TO tecs;


-- map 添加 
-- Function: pf_net_add_vswitchmap(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_vswitchmap(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_vswitchmap(in_vswitch_uuid character varying, 
               in_port_uuid character varying , in_is_cfg integer, in_is_selected integer, in_is_consistency integer )
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_same_pg integer;
  is_conflict integer;
  portid numeric(19,0);
  switchid numeric(19,0);
  is_exist integer; 
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  result.ret := pf_net_can_add_vswitchmap(in_vswitch_uuid,in_port_uuid);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
   -- swtich uuid 
  SELECT count(*) INTO is_exist FROM switch a, virtual_switch b WHERE a.id = b.switch_id AND a.switch_type = b.switch_type 
        AND a.uuid = in_vswitch_uuid;
  SELECT a.id INTO switchid FROM switch a, virtual_switch b WHERE a.id = b.switch_id AND a.switch_type = b.switch_type 
        AND a.uuid = in_vswitch_uuid;        
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  --- port
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_port_uuid;
  SELECT id INTO portid FROM port WHERE uuid = in_port_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
  
  
  -- same add
  SELECT count(*) INTO is_exist FROM virtual_switch_map WHERE port_id = portid AND virtual_switch_id = switchid;
  SELECT id INTO result.id FROM virtual_switch_map WHERE port_id = portid AND virtual_switch_id = switchid;
  IF is_exist > 0 THEN 
     result.ret  := RTN_HAS_SAME_ITEM; 
     return result;  
  END IF;
  
  -- add item 
  result.id := nextval('serial_virtual_switch_map');
  --result.uuid := in_uuid;
  
  BEGIN 
     INSERT INTO virtual_switch_map (id, port_id, virtual_switch_id, is_cfg, is_selected, is_consistency)
        values(result.id,portid,switchid, in_is_cfg, in_is_selected, in_is_consistency);     

    -- trigger
	IF in_is_consistency > 0 THEN 
        result.ret :=  pf_net_tr_add_edvsmap(switchid, portid);
	END IF;
	
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_vswitchmap(in_vswitch_uuid character varying, 
               in_port_uuid character varying, in_is_cfg integer, in_is_selected integer, in_is_consistency integer ) OWNER TO tecs;


--修改switch map 检查 
CREATE OR REPLACE FUNCTION pf_net_check_modify_vswitchmap(in_vswitch_uuid character varying,in_port_uuid character varying)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  portid numeric(19,0);
  switchid numeric(19,0);
  porttype integer;
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_SWITCH_MTU_LESS_PG integer := 8;
  RTN_SWITCH_UPLINKPORT_INVALID integer := 9;
  RTN_PORT_HAS_JOIN_OTHER_SWITCH integer := 10;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- swtich uuid 
  SELECT a.id INTO switchid FROM switch a, virtual_switch b WHERE a.id = b.switch_id AND a.switch_type = b.switch_type 
        AND a.uuid = in_vswitch_uuid;    
  SELECT count(*) INTO is_exist FROM switch a, virtual_switch b, port c, virtual_switch_map d
     WHERE a.id = b.switch_id AND a.switch_type = b.switch_type AND a.uuid = in_vswitch_uuid 
	     AND d.virtual_switch_id = a.id AND d.port_id = c.id 
		 AND c.uuid = in_port_uuid;				
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  --- port
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_port_uuid;
  SELECT id INTO portid FROM port WHERE uuid = in_port_uuid;
  SELECT port_type INTO porttype FROM port WHERE uuid = in_port_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
  
  -- port_type check 
  IF porttype = 2 THEN  -- sriov vf port;
     result := RTN_SWITCH_UPLINKPORT_INVALID; 
     return result;
  END IF;
  
  IF porttype = 2 THEN  -- kernel port(mgr, storage);
     result := RTN_SWITCH_UPLINKPORT_INVALID; 
     return result;
  END IF;
  
  -- same add 
  SELECT count(*) INTO is_exist FROM virtual_switch_map WHERE port_id = portid AND virtual_switch_id = switchid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; -- ; 
     return result;  
  END IF;
  
  -- port 需判断edvs 加入的网口是否是sriov网口，待bond完成后，完善。
    
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_modify_vswitchmap(in_vswitch_uuid character varying,in_port_uuid character varying) OWNER TO tecs;
            

CREATE OR REPLACE FUNCTION pf_net_modify_vswitchmap(in_vswitch_uuid character varying, 
               in_port_uuid character varying , in_is_cfg integer, in_is_selected integer, in_is_consistency integer )
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_same_pg integer;
  is_conflict integer;
  portid numeric(19,0);
  switchid numeric(19,0);
  is_exist integer; 
  oldconsistency integer := 0;
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  result.ret := pf_net_check_modify_vswitchmap(in_vswitch_uuid,in_port_uuid);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
  -- swtich uuid   
  SELECT a.id INTO switchid FROM switch a, virtual_switch b WHERE a.id = b.switch_id AND a.switch_type = b.switch_type 
        AND a.uuid = in_vswitch_uuid;      
  SELECT d.is_consistency INTO oldconsistency FROM switch a, virtual_switch b, port c, virtual_switch_map d
     WHERE a.id = b.switch_id AND a.switch_type = b.switch_type AND a.uuid = in_vswitch_uuid 
	     AND d.virtual_switch_id = a.id AND d.port_id = c.id 
		 AND c.uuid = in_port_uuid; 
  SELECT count(*) INTO is_exist FROM switch a, virtual_switch b, port c, virtual_switch_map d
     WHERE a.id = b.switch_id AND a.switch_type = b.switch_type AND a.uuid = in_vswitch_uuid 
	     AND d.virtual_switch_id = a.id AND d.port_id = c.id 
		 AND c.uuid = in_port_uuid;		 
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  --- port
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_port_uuid;
  SELECT id INTO portid FROM port WHERE uuid = in_port_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
      
  -- update item 
  --result.id := nextval('serial_virtual_switch_map');
  --result.uuid := in_uuid;
  
  BEGIN 
     UPDATE  virtual_switch_map SET is_cfg = in_is_cfg, is_selected = in_is_selected, is_consistency = in_is_consistency 
         WHERE     port_id = portid AND  virtual_switch_id =switchid ;      
     IF oldconsistency > in_is_consistency THEN 
	     result.ret := pf_net_tr_modify_edvsmap(switchid, portid, 0);
	 END IF;
	 
	 IF oldconsistency < in_is_consistency THEN 
	     result.ret := pf_net_tr_modify_edvsmap(switchid, portid, 1);
	 END IF;
	 
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_modify_vswitchmap(in_vswitch_uuid character varying, 
               in_port_uuid character varying, in_is_cfg integer, in_is_selected integer, in_is_consistency integer ) OWNER TO tecs;
            
        
            
---------            ------------------------------------------------------

CREATE OR REPLACE FUNCTION pf_net_can_del_vswitchmap(in_vswitch_uuid character varying,in_port_uuid character varying)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  portid numeric(19,0);
  vnaid numeric(19,0);  
  vnauuid character varying(64);
  switch_vsi_num t_query_total;
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_SWITCH_MTU_LESS_PG integer := 8;
  RTN_SWITCH_UPLINKPORT_INVALID integer := 9;
  RTN_PORT_HAS_JOIN_OTHER_SWITCH integer := 10;
  RTN_SWITCH_HAS_DEPLOY_VSI integer := 11;
  RTN_GET_SWITCH_VSI_NUM_FAILED integer := 12;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- swtich uuid 
  SELECT count(*) INTO is_exist FROM switch a, virtual_switch b, port c, virtual_switch_map d
     WHERE a.id = b.switch_id AND a.switch_type = b.switch_type AND a.uuid = in_vswitch_uuid 
	     AND d.virtual_switch_id = a.id AND d.port_id = c.id 
		 AND c.uuid = in_port_uuid;	
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  --- port
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_port_uuid;
  SELECT id INTO portid FROM port WHERE uuid = in_port_uuid;
  SELECT b.vna_uuid INTO vnauuid FROM port a, vna b  WHERE a.uuid = 
in_port_uuid AND a.vna_id = b.id ;  
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
  
  -- vswitch vsi num
  switch_vsi_num = pf_net_query_vswitchvna_vsi_num(in_vswitch_uuid,vnauuid);
  IF switch_vsi_num.ret = 0 THEN 
      IF switch_vsi_num.total_num > 0 THEN 
          result := RTN_SWITCH_HAS_DEPLOY_VSI;  -- switch has vsi 
          return result;
      END IF;
  ELSE       
      result := RTN_GET_SWITCH_VSI_NUM_FAILED;  -- get switch vsi num failed
      return result;  
  END IF;
    
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_can_del_vswitchmap(in_vswitch_uuid character varying,in_port_uuid character varying) OWNER TO tecs;


            

-- 删除switch map

CREATE OR REPLACE FUNCTION pf_net_del_vswitchmap(in_vswitch_uuid character varying,in_port_uuid character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  switchid numeric(19,0);
  portid numeric(19,0);
  oldconsistency integer := 0;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  result.ret := pf_net_can_del_vswitchmap(in_vswitch_uuid,in_port_uuid);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
   -- swtich uuid 
  SELECT a.id INTO switchid FROM switch a, virtual_switch b WHERE a.id = b.switch_id AND a.switch_type = b.switch_type 
        AND a.uuid = in_vswitch_uuid;   
  SELECT d.is_consistency INTO oldconsistency FROM switch a, virtual_switch b, port c, virtual_switch_map d
     WHERE a.id = b.switch_id AND a.switch_type = b.switch_type AND a.uuid = in_vswitch_uuid 
	     AND d.virtual_switch_id = a.id AND d.port_id = c.id 
		 AND c.uuid = in_port_uuid; 
  SELECT count(*) INTO is_exist FROM switch a, virtual_switch b, port c, virtual_switch_map d
     WHERE a.id = b.switch_id AND a.switch_type = b.switch_type AND a.uuid = in_vswitch_uuid 
	     AND d.virtual_switch_id = a.id AND d.port_id = c.id 
		 AND c.uuid = in_port_uuid;	
		 
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  --- port
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_port_uuid;
  SELECT id INTO portid FROM port WHERE uuid = in_port_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM virtual_switch_map WHERE port_id = portid AND virtual_switch_id = switchid ;
	
	-- trigger
	IF oldconsistency > 0 THEN 
        result.ret :=  pf_net_tr_del_edvsmap(switchid, portid);
	END IF;
	
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_vswitchmap(in_vswitch_uuid character varying,in_port_uuid character varying) OWNER TO tecs;


-- 查询switch_map (通过switch uuid)

CREATE OR REPLACE FUNCTION pf_net_query_vswitchmap_by_switch(in_switch_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    -- swtich uuid 
    SELECT count(*) INTO is_exist FROM switch a, virtual_switch b WHERE a.id = b.switch_id AND a.switch_type = b.switch_type 
        AND a.uuid = in_switch_uuid;
    IF is_exist <= 0 THEN 
         --result := RTN_ITEM_NO_EXIST; 
         return ref;
    END IF;  
  
    OPEN ref FOR SELECT switch_uuid,switch_name,switch_type,
        vna_uuid, vna_application,vnm_application,host_name,
        port_uuid,port_name,port_type,switch_map_is_cfg,switch_map_is_selected,switch_map_is_consistency 
        FROM v_net_switch_port_vna WHERE switch_uuid = in_switch_uuid;
      
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vswitchmap_by_switch(in_switch_uuid character varying) OWNER TO tecs;


--- 查询swtich map （通过vna）　
CREATE OR REPLACE FUNCTION pf_net_query_vswitchmap_by_vna(in_vna_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    -- vna uuid 
    SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
    IF is_exist <= 0 THEN 
         --result := RTN_ITEM_NO_EXIST; 
         return ref;
    END IF;  
    
    -- 
    OPEN ref FOR SELECT switch_uuid,switch_name,switch_type,
        vna_uuid, vna_application,vnm_application,host_name,
        port_uuid,port_name,port_type ,switch_map_is_cfg,switch_map_is_selected,switch_map_is_consistency 
        FROM v_net_switch_port_vna WHERE vna_uuid = in_vna_uuid;
        
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vswitchmap_by_vna(in_vna_uuid character varying) OWNER TO tecs;


--- 查询swtich map （通过switch vna）　
CREATE OR REPLACE FUNCTION pf_net_query_vswitchmap_by_switchvna(in_switch_uuid character varying,in_vna_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    -- vna uuid 
    SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
    IF is_exist <= 0 THEN 
         --result := RTN_ITEM_NO_EXIST; 
         return ref;
    END IF;  
    
    -- swtich uuid 
    SELECT count(*) INTO is_exist FROM switch a, virtual_switch b WHERE a.id = b.switch_id AND a.switch_type = b.switch_type 
        AND a.uuid = in_switch_uuid;
    IF is_exist <= 0 THEN 
         --result := RTN_ITEM_NO_EXIST; 
         return ref;
    END IF;  
    
    -- 
    OPEN ref FOR SELECT switch_uuid,switch_name,switch_type,
        vna_uuid, vna_application,vnm_application,host_name,
        port_uuid,port_name,port_type ,switch_map_is_cfg,switch_map_is_selected,switch_map_is_consistency 
        FROM v_net_switch_port_vna WHERE vna_uuid = in_vna_uuid AND switch_uuid = in_switch_uuid;
        
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_vswitchmap_by_switchvna(in_switch_uuid character varying,in_vna_uuid character varying) OWNER TO tecs;





