


-- 判断netplane MAC RANGE 能否添加
CREATE OR REPLACE FUNCTION pf_net_check_add_netplane_macrange(in_uuid character varying, 
                           in_num_begin numeric(19), in_num_end numeric(19),
                           in_str_begin character varying,in_str_end character varying)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  netplaneid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_SWITCH_MTU_LESS_PG integer := 8;
  RTN_SWITCH_UPLINKPORT_INVALID integer := 9;
  RTN_PORT_HAS_JOIN_OTHER_SWITCH integer := 10;
  RTN_PG_MUST_CFG_NETPLANE   integer := 13;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  -- begin end 
  IF in_num_begin > in_num_end THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
/*  由应用来保准
  -- ip begin end mask 互相不能重叠  
  SELECT count(*) INTO is_exist FROM mac_range WHERE  ( in_num_begin >= mac_begin_num AND in_num_begin <= mac_end_num ) OR 
           ( in_num_end >= mac_begin_num AND in_num_end <= mac_end_num ) OR 
           ( in_num_begin <= mac_begin_num AND in_num_end >= mac_end_num );  
  IF is_exist > 0 THEN 
     result := RTN_ITEM_CONFLICT; 
     return result;
  END IF;  
*/
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_add_netplane_macrange(in_uuid character varying, 
                           in_num_begin numeric(19), in_num_end numeric(19),
                           in_str_begin character varying,in_str_end character varying) OWNER TO tecs;


-- NETPLANE MAC RANGE添加 
-- Function: pf_net_add_netplane_macrange(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_netplane_macrange(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_netplane_macrange(in_uuid character varying, 
                           in_num_begin numeric(19), in_num_end numeric(19),
                           in_str_begin character varying,in_str_end character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_exist integer;
  is_conflict integer;
  netplaneid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  result.ret := pf_net_check_add_netplane_macrange(in_uuid,in_num_begin,in_num_end,
                            in_str_begin,in_str_end);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
  -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  -- 不支持重复添加 

  -- insert item 
  result.id := nextval('serial_mac_range');
  --result.uuid := in_uuid;
  BEGIN 
    INSERT INTO mac_range(id,netplane_id,mac_begin,mac_end,mac_begin_num,mac_end_num) 
            values(result.id,netplaneid,in_str_begin, in_str_end,in_num_begin,in_num_end);
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_netplane_macrange(in_uuid character varying, 
                           in_num_begin numeric(19), in_num_end numeric(19),
                           in_str_begin character varying,in_str_end character varying) OWNER TO tecs;

                 
     

-- 删除 netplane mac range
CREATE OR REPLACE FUNCTION pf_net_del_netplane_macrange(in_uuid character varying,
                            in_num_begin numeric(19), in_num_end numeric(19),
                           in_str_begin character varying,in_str_end character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  netplaneid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result.ret  := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  -- begin end 
  IF in_num_begin > in_num_end THEN 
      result.ret  := RTN_PARAM_INVALID; 
      return result;
  END IF;
  
  -- del 不作检查，由应用保准
      
  SELECT count(*) INTO is_exist FROM mac_range WHERE netplane_id = netplaneid 
                AND mac_begin_num = in_num_begin AND mac_end_num = in_num_end 
                AND mac_begin = in_str_begin AND mac_end = in_str_end;
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;                
    
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM mac_range WHERE netplane_id = netplaneid 
                AND mac_begin_num = in_num_begin AND mac_end_num = in_num_end 
                AND mac_begin = in_str_begin AND mac_end = in_str_end;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_netplane_macrange(in_uuid character varying,
                            in_num_begin numeric(19), in_num_end numeric(19),
                           in_str_begin character varying,in_str_end character varying) OWNER TO tecs;

                           
                           
/*  -- 已有定义
CREATE TYPE t_query_total  AS(
    ret integer, -- proc ret
    total_num integer  --- 
);

*/                            

-- 检查 check netplane mac range 是否已有资源被分配
CREATE OR REPLACE FUNCTION pf_net_query_netplane_macrange_alloc(in_uuid character varying,
                            in_num_begin numeric(19), in_num_end numeric(19))
  RETURNS t_query_total AS
$BODY$
DECLARE
  result  t_query_total;
  is_same integer;
  is_exist integer;
  netplaneid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result.ret  := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  -- begin end 
  IF in_num_begin > in_num_end THEN 
      result.ret  := RTN_PARAM_INVALID; 
      return result;
  END IF;
        
  SELECT count(*) INTO result.total_num FROM mac_pool WHERE netplane_id = netplaneid 
                AND (mac_num >= in_num_begin AND mac_num <= in_num_end );
    
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_netplane_macrange_alloc(in_uuid character varying,
                            in_num_begin numeric(19), in_num_end numeric(19)) OWNER TO tecs;


-- 查询macrange(通过netplane uuid)

CREATE OR REPLACE FUNCTION pf_net_query_netplane_macrange(in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    netplaneid numeric(19,0);
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    -- logicnetwork uuid 
    SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
    SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
    IF is_exist <= 0 THEN 
         --result := RTN_ITEM_NO_EXIST; 
         return ref;
    END IF;  
      
    OPEN ref FOR SELECT in_uuid, mac_begin_num,mac_end_num, mac_begin, mac_end 
      FROM mac_range  
      WHERE netplane_id = netplaneid;
    
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_netplane_macrange(in_uuid character varying) OWNER TO tecs;







                                 