


-- 判断bond map 能否添加
CREATE OR REPLACE FUNCTION pf_net_check_add_bondmap(in_vna_uuid character varying, in_bond_uuid character varying, 
                           in_phy_uuid character varying, 
                           in_is_cfg integer,in_is_selected integer )
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  bondid numeric(19,0);
  phyid numeric(19,0);
  vlanid numeric(19,0);
  vnaid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_PG_MUST_CFG_NETPLANE integer := 13;
  RTN_MUST_CFG_VALID_RANGE   integer := 14;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
   -- vna uuid  
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
  
  
  -- bond uuid  
  SELECT count(*) INTO is_exist FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid AND a.vna_id = vnaid;
  SELECT a.id INTO bondid FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
            
  -- phy port uuid 
  SELECT count(*) INTO is_exist FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid AND a.vna_id = vnaid;
  SELECT a.id INTO phyid FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
  -- phy port 是否已经加入其它bond口
  SELECT count(*) INTO is_exist FROM bond_map WHERE physical_port_id = phyid;
  IF is_exist > 0 THEN 
     result := RTN_ITEM_CONFLICT; 
     return result;
  END IF;
  
  -- phy port 如果已经作为switch的uplink，也不能再作为bond的成员口
  SELECT count(*) into is_exist FROM virtual_switch_map  WHERE port_id = phyid;
  IF is_exist > 0 THEN 
     result := RTN_ITEM_CONFLICT; 
     return result;
  END IF;
  
  --如果是sriov网口，如果有vnic在使用，也不能再作为bond的成员口
  SELECT count(*) into is_exist FROM sriov_vf_port a, vsi_sriov b WHERE a.port_id = b.sriov_vf_port_id AND 
             a.vna_id = vnaid AND a.sriov_port_id = phyid;
  IF is_exist > 0 THEN 
     result := RTN_RESOURCE_USING; 
     return result;
  END IF; 
    
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_add_bondmap(in_vna_uuid character varying, in_bond_uuid character varying, 
                           in_phy_uuid character varying, 
                           in_is_cfg integer,in_is_selected integer  ) OWNER TO tecs;


-- VLAN MAP 添加 
-- Function: pf_net_add_bondmap(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_bondmap(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_bondmap(in_vna_uuid character varying, in_bond_uuid character varying, 
                           in_phy_uuid character varying, 
                           in_is_cfg integer,in_is_selected integer )
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_exist integer;
  is_conflict integer;
  bondid numeric(19,0);
  phyid numeric(19,0);
  vlanid numeric(19,0);
  vnaid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  result.ret := pf_net_check_add_bondmap(in_vna_uuid, in_bond_uuid,in_phy_uuid,in_is_cfg,in_is_selected);  
  -- 重复添加 直接返回
  IF result.ret = RTN_HAS_SAME_ITEM THEN      
     result.ret := 0;
     return result;
  END IF;
  IF result.ret > 0 THEN      
     return result;
  END IF;
  
   -- vna uuid  
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
  -- bond uuid  
  SELECT count(*) INTO is_exist FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid;
  SELECT a.id INTO bondid FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
            
  -- phy port uuid 
  SELECT count(*) INTO is_exist FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid;
  SELECT a.id INTO phyid FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
  -- insert item 
  result.id := nextval('serial_bond_map');
  --result.uuid := in_uuid;
  BEGIN 
    INSERT INTO bond_map(id,vna_id,bond_id,physical_port_id,is_cfg,is_selected) 
            values(result.id,vnaid,bondid,phyid,in_is_cfg,in_is_selected);
            
    -- trigger
    SELECT count(*) INTO is_exist FROM sriov_port WHERE physical_port_id = phyid;
    IF is_exist > 0 THEN 
        result.ret := pf_net_tr_add_bondmap(bondid,phyid);
    END IF;
    
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_bondmap(in_vna_uuid character varying, in_bond_uuid character varying, 
                           in_phy_uuid character varying, 
                           in_is_cfg integer,in_is_selected integer  ) OWNER TO tecs;



-- 判断bond map  能否修改 
CREATE OR REPLACE FUNCTION pf_net_check_modify_bondmap(in_vna_uuid character varying,in_bond_uuid character varying, 
                           in_phy_uuid character varying, in_is_cfg integer,in_is_selected integer  )
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  bondid numeric(19,0);
  phyid numeric(19,0);
  vlanid numeric(19,0);
  vnaid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
  RTN_PARAM_INVALID integer := 7;
  RTN_PG_MUST_CFG_NETPLANE integer := 13;
  RTN_MUST_CFG_VALID_RANGE   integer := 14;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- vna uuid  
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
  -- bond uuid  
  SELECT count(*) INTO is_exist FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid;
  SELECT a.id INTO bondid FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
            
  -- phy port uuid 
  SELECT count(*) INTO is_exist FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid;
  SELECT a.id INTO phyid FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
  --判断bondmap中是否存在
  SELECT count(*) into is_exist FROM bond_map WHERE vna_id = vnaid AND bond_id = bondid AND physical_port_id = phyid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
    
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_modify_bondmap(in_vna_uuid character varying,in_bond_uuid character varying, 
                           in_phy_uuid character varying , in_is_cfg integer,in_is_selected integer) OWNER TO tecs;                                   

                           
-- 修改bond map
CREATE OR REPLACE FUNCTION pf_net_modify_bondmap(in_vna_uuid character varying,in_bond_uuid character varying, 
                           in_phy_uuid character varying , in_is_cfg integer,in_is_selected integer )
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  bondid numeric(19,0);
  phyid numeric(19,0);
  vlanid numeric(19,0);
  vnaid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- check del 
  result.ret := pf_net_check_modify_bondmap(in_vna_uuid,in_bond_uuid,in_phy_uuid,in_is_cfg,in_is_selected);  
  IF result.ret > 0 THEN      
     return result;
  END IF;
  
  -- vna uuid  
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
  -- bond uuid  
  SELECT count(*) INTO is_exist FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid;
  SELECT a.id INTO bondid FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
            
  -- phy port uuid 
  SELECT count(*) INTO is_exist FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid;
  SELECT a.id INTO phyid FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
           
  -- update item
  result.ret := 0;
  BEGIN 
    UPDATE bond_map SET is_cfg = in_is_cfg, is_selected = in_is_selected  
       WHERE vna_id = vnaid AND bond_id = bondid AND physical_port_id = phyid;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_modify_bondmap(in_vna_uuid character varying,in_bond_uuid character varying, 
                           in_phy_uuid character varying , in_is_cfg integer,in_is_selected integer ) OWNER TO tecs;


-- 判断bond map  能否删除
CREATE OR REPLACE FUNCTION pf_net_check_del_bondmap(in_vna_uuid character varying,in_bond_uuid character varying, 
                           in_phy_uuid character varying )
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  bondid numeric(19,0);
  phyid numeric(19,0);
  vlanid numeric(19,0);
  vnaid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
  RTN_PARAM_INVALID integer := 7;
  RTN_PG_MUST_CFG_NETPLANE integer := 13;
  RTN_MUST_CFG_VALID_RANGE   integer := 14;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- vna uuid  
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
  -- bond uuid  
  SELECT count(*) INTO is_exist FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid;
  SELECT a.id INTO bondid FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
            
  -- phy port uuid 
  SELECT count(*) INTO is_exist FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid;
  SELECT a.id INTO phyid FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
  --判断bondmap中是否存在
  SELECT count(*) into is_exist FROM bond_map WHERE vna_id = vnaid AND bond_id = bondid AND physical_port_id = phyid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
  --- 判断该物理口是否是SRIOV nic在使用vf
  SELECT count(*) into is_exist FROM sriov_vf_port a, vsi_sriov b WHERE a.port_id = b.sriov_vf_port_id AND 
             a.vna_id = vnaid AND a.sriov_port_id = phyid;
  IF is_exist > 0 THEN 
     result := RTN_RESOURCE_USING; 
     return result;
  END IF; 
  
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_del_bondmap(in_vna_uuid character varying,in_bond_uuid character varying, 
                           in_phy_uuid character varying ) OWNER TO tecs;                 
                 

-- 删除 netplane vlan map
CREATE OR REPLACE FUNCTION pf_net_del_bondmap(in_vna_uuid character varying,in_bond_uuid character varying, 
                           in_phy_uuid character varying )
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  bondid numeric(19,0);
  phyid numeric(19,0);
  vlanid numeric(19,0);
  vnaid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- check del 
  result.ret := pf_net_check_del_bondmap(in_vna_uuid,in_bond_uuid,in_phy_uuid);  
  IF result.ret > 0 THEN      
     return result;
  END IF;
  
  -- vna uuid  
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
  -- bond uuid  
  SELECT count(*) INTO is_exist FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid;
  SELECT a.id INTO bondid FROM port a, bond b WHERE a.id = b.port_id AND a.uuid = in_bond_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;   
            
  -- phy port uuid 
  SELECT count(*) INTO is_exist FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid;
  SELECT a.id INTO phyid FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_phy_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
     
    
  -- del item
  result.ret := 0;
  BEGIN 
	-- trigger
	result.ret := pf_net_tr_del_bondmap(bondid,phyid);
	
    DELETE FROM bond_map WHERE vna_id = vnaid AND bond_id = bondid AND physical_port_id = phyid;
	
	
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_bondmap(in_vna_uuid character varying,in_bond_uuid character varying, 
                           in_phy_uuid character varying ) OWNER TO tecs;



-- 查询bond_map(通过vna_uuid)

CREATE OR REPLACE FUNCTION pf_net_query_bondmap_by_vna(in_vna_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    netplaneid numeric(19,0);
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN  
    OPEN ref FOR SELECT vna_uuid,bond_uuid,bond_name,phy_uuid,phy_name,bond_mode,lacp_is_success,backup_is_active , is_cfg,is_selected 
       FROM v_net_bondmap_bond_phy    
       WHERE vna_uuid = in_vna_uuid;
    
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_bondmap_by_vna(in_vna_uuid character varying) OWNER TO tecs;

-- 查询bond_map(通过 vm pg uuid )
CREATE OR REPLACE FUNCTION pf_net_query_bondmap_by_bond(in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    netplaneid numeric(19,0);
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    
    OPEN ref FOR SELECT vna_uuid,bond_uuid,bond_name,phy_uuid,phy_name,bond_mode,lacp_is_success,backup_is_active, is_cfg,is_selected 
       FROM v_net_bondmap_bond_phy    
       WHERE bond_uuid = in_uuid;
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_bondmap_by_bond(in_uuid character varying) OWNER TO tecs;



-- 查询bond_map(通过 phy uuid )
CREATE OR REPLACE FUNCTION pf_net_query_bondmap_by_phy(in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    netplaneid numeric(19,0);
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    
    OPEN ref FOR SELECT vna_uuid,bond_uuid,bond_name,phy_uuid,phy_name,bond_mode,lacp_is_success,backup_is_active,is_cfg,is_selected 
       FROM v_net_bondmap_bond_phy    
       WHERE phy_uuid = in_uuid;
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_bondmap_by_phy(in_uuid character varying) OWNER TO tecs;







                                 