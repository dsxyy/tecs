


-- 判断逻辑网络能否添加
CREATE OR REPLACE FUNCTION pf_net_check_add_logicnetwork(in_name character varying, in_uuid character varying, 
                           in_pg_uuid character varying,in_des character varying, in_ip_mode integer)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  pgid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_SWITCH_MTU_LESS_PG integer := 8;
  RTN_SWITCH_UPLINKPORT_INVALID integer := 9;
  RTN_PORT_HAS_JOIN_OTHER_SWITCH integer := 10;
  RTN_PG_MUST_CFG_NETPLANE   integer := 13;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- pg uuid 
  SELECT count(*) INTO is_exist FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.pg_type = b.pg_type 
        AND a.uuid = in_pg_uuid;
  SELECT a.id INTO pgid FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.pg_type = b.pg_type 
        AND a.uuid = in_pg_uuid;    
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
  
  -- pg 必须已经是配置了netplane
  SELECT count(*) INTO is_exist FROM port_group WHERE id = pgid AND netplane_id is not null; 
  IF is_exist <= 0 THEN 
     result := RTN_PG_MUST_CFG_NETPLANE; 
     return result;
  END IF;
  
  -- ip mode 只能为0,1,2
  IF (in_ip_mode  = 0 OR in_ip_mode = 1 OR in_ip_mode = 2)THEN 
      result := 0;
  ELSE     
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
    
  -- 查看是否重复添加 
  SELECT count(*) INTO is_exist FROM logic_network WHERE name = in_name;
  IF is_exist > 0 THEN 
     SELECT count(*) INTO is_same FROM logic_network WHERE name = in_name AND vm_pg_id = pgid AND description = in_des AND ip_bootprotocolmode = in_ip_mode;
     IF is_same > 0 THEN 
         result := RTN_HAS_SAME_ITEM; 
         return result;
     ELSE 
         result := RTN_ITEM_CONFLICT; 
         return result;
     END IF; 
  END IF;
  
          
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_add_logicnetwork(in_name character varying, in_uuid character varying, 
                           in_pg_uuid character varying,in_des character varying,in_ip_mode integer) OWNER TO tecs;


-- 逻辑网络添加 
-- Function: pf_net_add_logicnetwork(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_logicnetwork(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_logicnetwork(in_name character varying, in_uuid character varying, 
                 in_pg_uuid character varying,in_des character varying,in_ip_mode integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_exist integer;
  is_conflict integer;
  pgid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  result.ret := pf_net_check_add_logicnetwork(in_name,in_uuid,in_pg_uuid,in_des,in_ip_mode);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
  -- pg uuid 
  SELECT count(*) INTO is_exist FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.pg_type = b.pg_type 
        AND a.uuid = in_pg_uuid;
  SELECT a.id INTO pgid FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.pg_type = b.pg_type 
        AND a.uuid = in_pg_uuid;    
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
  
  -- 不支持重复添加 

  -- insert item 
  result.id := nextval('serial_logicnetwork');
  result.uuid := in_uuid;
  BEGIN 
    INSERT INTO logic_network(id,name,uuid,vm_pg_id,description,ip_bootprotocolmode) values(result.id,in_name,in_uuid,pgid,in_des,in_ip_mode);
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_logicnetwork(in_name character varying, in_uuid character varying, 
                 in_pg_uuid character varying,in_des character varying,in_ip_mode integer) OWNER TO tecs;

                 

-- check modify        
CREATE OR REPLACE FUNCTION pf_net_check_modify_logicnetwork(in_name character varying, in_uuid character varying, 
                 in_pg_uuid character varying,in_des character varying,in_ip_mode integer)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  oldpgid numeric(19,0);
  pgid numeric(19,0);
  lnid numeric(19,0);
  ipmode integer; 
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
  RTN_PARAM_INVALID integer := 7;
  RTN_PG_MUST_CFG_NETPLANE   integer := 13;
BEGIN
  result := 0;
  -- 入参检查 后面做
  
  -- pg uuid 
  SELECT count(*) INTO is_exist FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.pg_type = b.pg_type 
        AND a.uuid = in_pg_uuid;
  SELECT a.id INTO pgid FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.pg_type = b.pg_type 
        AND a.uuid = in_pg_uuid;    
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
  
  -- pg 必须已经是配置了netplane
  SELECT count(*) INTO is_exist FROM port_group WHERE id = pgid AND netplane_id is not null; 
  IF is_exist <= 0 THEN 
     result := RTN_PG_MUST_CFG_NETPLANE; 
     return result;
  END IF;
  
  -- logicnetwork uuid 
  SELECT count(*) INTO is_exist FROM logic_network WHERE uuid = in_uuid; 
  SELECT ip_bootprotocolmode INTO ipmode FROM logic_network WHERE uuid = in_uuid; 
  SELECT id INTO lnid FROM logic_network WHERE uuid = in_uuid; 
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;
  
  --如果已有logic_network_ip_pool记录， 则ip mode不允许修改,
  IF ipmode = in_ip_mode THEN 
     result := 0; 
  ELSE
     SELECT count(*) INTO is_exist FROM logic_network_ip_pool WHERE logic_network_id = lnid;
	 IF is_exist > 0 THEN 	 
         result := RTN_RESOURCE_USING; 
         return result;
	 END IF;	 
  END IF;
    
  -- 查看name 是否和其他冲突 
  SELECT count(*) INTO is_exist FROM logic_network WHERE uuid = in_uuid AND name = in_name; 
  IF is_exist <=  0 THEN 
     SELECT count(*) INTO is_exist FROM logic_network WHERE name = in_name; 
     IF is_exist > 0 THEN 
         result := RTN_ITEM_CONFLICT; 
         return result;
     END IF;
  END IF;
  
  -- 修改logicnetwork pg uuid 
  --如果VNIC存在logic network uuid的情况下，不能修改pg_id
  SELECT count(*) INTO is_exist FROM logic_network WHERE uuid = in_uuid AND vm_pg_id = pgid; 
  IF is_exist <= 0 THEN 
     -- modify pg uuid 
     SELECT count(*) INTO is_exist FROM vnic WHERE logic_network_uuid = in_uuid;
     IF is_exist > 0 THEN 
         result := RTN_RESOURCE_USING; 
         return result;
     END IF;
  END IF;
  
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_modify_logicnetwork(in_name character varying, in_uuid character varying, 
                 in_pg_uuid character varying,in_des character varying,in_ip_mode integer) OWNER TO tecs;
                         


CREATE OR REPLACE FUNCTION pf_net_modify_logicnetwork(in_name character varying, in_uuid character varying, 
                 in_pg_uuid character varying,in_des character varying,in_ip_mode integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  pgid numeric(19,0);
  lgnetworkid numeric(19,0);
  oldIpmode integer := 0;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_NETPLANE_MTU_LESS_PG  integer := 5;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  
  -- 检查能否add
  result.ret := pf_net_check_modify_logicnetwork(in_name,in_uuid,in_pg_uuid,in_des,in_ip_mode);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
  -- pg uuid 
  SELECT count(*) INTO is_exist FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.pg_type = b.pg_type 
        AND a.uuid = in_pg_uuid;
  SELECT a.id INTO pgid FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND a.pg_type = b.pg_type 
        AND a.uuid = in_pg_uuid;    
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
  
  -- logicnetwork 
  SELECT count(*) INTO is_exist FROM logic_network WHERE uuid = in_uuid; 
  SELECT id INTO lgnetworkid FROM logic_network WHERE uuid = in_uuid; 
  SELECT ip_bootprotocolmode INTO oldIpmode FROM logic_network WHERE uuid = in_uuid;   
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;
  
  -- modify item
  result.id  := lgnetworkid;
  result.uuid := in_uuid;
  BEGIN 
  
    -- 设置为none后，需将range删除 
    IF in_ip_mode = 2 THEN 
		DELETE  FROM logic_network_ip_range WHERE logic_network_id = lgnetworkid;
	END IF;
    
    UPDATE logic_network SET name = in_name, ip_bootprotocolmode = in_ip_mode,  vm_pg_id = pgid, description =in_des 
        WHERE uuid = in_uuid;    
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_modify_logicnetwork(in_name character varying, in_uuid character varying, 
                 in_pg_uuid character varying,in_des character varying,in_ip_mode integer)  OWNER TO tecs;

                                 
-- check logic network del
CREATE OR REPLACE FUNCTION pf_net_check_del_logicnetwork(in_uuid character varying)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
  RTN_PARAM_INVALID integer := 7;
BEGIN
  result := 0;
  -- 入参检查 后面做
    
  -- logicnetwork uuid 
  SELECT count(*) INTO is_exist FROM logic_network WHERE uuid = in_uuid; 
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;
      
  --如果VNIC存在logic network uuid的情况下，不能删除
  SELECT count(*) INTO is_exist FROM vnic WHERE logic_network_uuid = in_uuid;
  IF is_exist > 0 THEN 
      result := RTN_RESOURCE_USING; 
      return result;
  END IF;

  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_del_logicnetwork(in_uuid character varying) OWNER TO tecs;



CREATE OR REPLACE FUNCTION pf_net_del_logicnetwork(in_uuid character varying) 
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  switchid numeric(19,0);
  portid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  result.ret := pf_net_check_del_logicnetwork(in_uuid);
  IF result.ret > 0 THEN 
     return result;
  END IF;
    
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM logic_network WHERE uuid = in_uuid ;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_logicnetwork(in_uuid character varying) OWNER TO tecs;


-- 查询logicnetwork (通过 uuid)


CREATE OR REPLACE FUNCTION pf_net_query_logicnetwork(in_uuid character varying)
  RETURNS t_logicnetwork_query AS
$BODY$
DECLARE
    result t_logicnetwork_query;
    is_exist integer; 
    pgid numeric(19,0);
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    result.ret := 0;
    
    -- logic_network uuid 
    SELECT count(*) INTO is_exist FROM logic_network WHERE uuid = in_uuid;
    SELECT vm_pg_id INTO pgid FROM logic_network WHERE uuid = in_uuid;
    IF is_exist <= 0 THEN 
         result.ret := RTN_ITEM_NO_EXIST; 
         return result;
    END IF;  
    
    result.uuid  := in_uuid;
    SELECT name INTO result.name FROM  logic_network WHERE uuid = in_uuid;
    
    -- pg uuid 
    SELECT uuid INTO result.pg_uuid FROM port_group WHERE id = pgid;
  
    SELECT description INTO result.des FROM  logic_network WHERE uuid = in_uuid;
    
    SELECT ip_bootprotocolmode INTO result.ipmode FROM  logic_network WHERE uuid = in_uuid;
    
    return result;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_logicnetwork(in_uuid character varying) OWNER TO tecs;



-- 查询logicnetwork (通过netplane uuid)

CREATE OR REPLACE FUNCTION pf_net_query_logicnetwork_by_netplane(in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    -- swtich uuid 
    SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
    IF is_exist <= 0 THEN 
         --result := RTN_ITEM_NO_EXIST; 
         return ref;
    END IF;  
  
    OPEN ref FOR SELECT netplane_uuid, netplane_name,netplane_mtu,
         pg_uuid,pg_name,pg_mtu,
         logicnetwork_uuid,logicnetwork_name,logicnetwork_ipmode 
      FROM v_net_logicnetwork_portgroup_netplane 
      WHERE netplane_uuid = in_uuid;
    
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_logicnetwork_by_netplane(in_uuid character varying) OWNER TO tecs;


-- 查询logicnetwork (通过pg uuid)
CREATE OR REPLACE FUNCTION pf_net_query_logicnetwork_by_portgroup(in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    -- pg uuid 
    SELECT count(*) INTO is_exist FROM port_group a, vm_pg b WHERE a.id = b.pg_id AND 
        uuid = in_uuid;
    IF is_exist <= 0 THEN 
         --result := RTN_ITEM_NO_EXIST; 
         return ref;
    END IF;  
  
    OPEN ref FOR SELECT netplane_uuid, netplane_name,netplane_mtu,
         pg_uuid,pg_name,pg_mtu,
         logicnetwork_uuid,logicnetwork_name,logicnetwork_ipmode
      FROM v_net_logicnetwork_portgroup_netplane 
      WHERE pg_uuid = in_uuid;
    
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_logicnetwork_by_portgroup(in_uuid character varying) OWNER TO tecs;





                                 