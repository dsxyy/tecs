

-- 网络平面添加 
-- Function: pf_net_add_port(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_port(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_port(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_conflict integer;
  vnaid numeric(19,0);
  is_exist integer; 
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- 检查vna uuid 是否有效
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;  
    
  -- 是否已存在相同记录
  SELECT count(*) INTO is_same FROM port WHERE port_type = in_type AND vna_id = vnaid  AND name = in_name AND state = in_state 
         AND is_broadcast = in_is_broadcast AND is_running = in_is_running AND is_multicast = in_is_multicast AND promiscuous = in_promiscuous 
         AND mtu = in_mtu AND is_master = in_is_master AND admin_state = in_admin_state AND is_online = in_is_online;  
  IF is_same > 0 THEN
     result.ret := RTN_HAS_SAME_ITEM;   -- has same item
     SELECT id INTO result.id FROM port WHERE port_type = in_type AND vna_id = vnaid  AND name = in_name ;
     SELECT uuid INTO result.uuid FROM port WHERE port_type = in_type AND vna_id = vnaid  AND name = in_name ;
     return result;
  END IF;

  -- port name 名称是否冲突
  SELECT count(*) INTO is_conflict FROM  port WHERE vna_id = vnaid  AND name = in_name ;
  IF is_conflict > 0 THEN
     result.ret := RTN_ITEM_CONFLICT; -- conflict 
     return result;
  END IF;

  -- insert item
  result.id := nextval('serial_port');
  result.uuid := in_uuid;
  BEGIN 
    INSERT INTO port values(result.id,in_type,vnaid,in_name,in_uuid,in_state,in_is_broadcast,in_is_running,in_is_multicast,in_promiscuous,in_mtu,in_is_master,in_admin_state,in_is_online);
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_port(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer) OWNER TO tecs;


-- port修改
-- Function: pf_net_modify_port(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_modify_port(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_modify_port(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  vnaid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_NETPLANE_MTU_LESS_PG  integer := 5;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  -- 检查vna uuid 是否有效
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;  
  
  -- 检查port uuid 是否有效
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;    
  
  -- 是否已存在相同记录
  SELECT count(*) INTO is_same FROM port WHERE uuid = in_uuid AND port_type = in_type AND vna_id = vnaid  AND name = in_name AND state = in_state 
         AND is_broadcast = in_is_broadcast AND is_running = in_is_running AND is_multicast = in_is_multicast AND promiscuous = in_promiscuous 
         AND mtu = in_mtu AND is_master = in_is_master AND admin_state = in_admin_state AND is_online = in_is_online;  
  IF is_same > 0 THEN
     result.ret := RTN_HAS_SAME_ITEM;   -- has same item
     result.uuid := in_uuid;
     SELECT id INTO result.id FROM port WHERE uuid = in_uuid; 
     return result;
  END IF;
    
  -- port vnaid name
  SELECT count(*) INTO is_exist FROM port WHERE vna_id = vnaid AND name = in_name AND uuid = in_uuid;
  IF is_exist <= 0 THEN
     SELECT count(*) INTO is_exist FROM port WHERE vna_id = vnaid AND name = in_name ;
     IF is_exist > 0 THEN
       result.ret := RTN_ITEM_CONFLICT;-- 
       return result;          
     END IF;
  END IF;
   
  -- modify item
  -- 修改port type时，必须先删除后添加
  BEGIN 
    SELECT id INTO result.id FROM port WHERE uuid = in_uuid;
    result.uuid := in_uuid;
    UPDATE port SET port_type = in_type, name = in_name, state = in_state, is_broadcast = in_is_broadcast,is_running = in_is_running,is_multicast = in_is_multicast, 
            promiscuous = in_promiscuous , mtu = in_mtu, is_master = in_is_master, admin_state = in_admin_state,is_online = in_is_online WHERE uuid = in_uuid ;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_modify_port(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer) OWNER TO tecs;



-- 删除port
-- Function: pf_net_del_port(character varying)

-- DROP FUNCTION pf_net_del_port(character varying);

CREATE OR REPLACE FUNCTION pf_net_del_port(netplane_uuid character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否存在记录
  SELECT count(*) INTO is_exist FROM port WHERE uuid = $1 ;  
  IF is_exist <= 0 THEN
     result.ret := RTN_ITEM_NO_EXIST;-- does not exist item
     return result;
  END IF;

  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM port WHERE uuid = $1 ;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_port(character varying) OWNER TO tecs;



--- 查询port summary
--- 输出 name,uuid
-- Function: pf_net_query_port_summary()

-- DROP FUNCTION pf_net_query_port_summary();

CREATE OR REPLACE FUNCTION pf_net_query_port_summary(in_vna_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
        ref refcursor;
BEGIN
       OPEN ref FOR SELECT a.name,a.uuid, a.port_type FROM port a, vna b WHERE a.vna_id = b.id AND b.vna_uuid = in_vna_uuid ;
       RETURN ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_port_summary(character varying) OWNER TO tecs;



-- 查询port 
-- 输出 uuid,name,description,mtu
-- Function: pf_net_query_port(character varying)

-- DROP FUNCTION pf_net_query_port(character varying);

CREATE OR REPLACE FUNCTION pf_net_query_port(in_port_uuid character varying)
  RETURNS t_port_query AS
$BODY$
DECLARE
  result  t_port_query;
  is_exist integer;
  RTN_ITEM_NO_EXIST integer :=4;
BEGIN
--  SELECT uuid into result.uuid, name into result.name,description into result.description,mtu into result.mtu FROM netplane WHERE uuid = $1;
  result.ret := 0;
  SELECT count(*) INTO is_exist FROM port a, vna b WHERE a.vna_id = b.id AND a.uuid = in_port_uuid;
  SELECT b.vna_uuid INTO result.vna_uuid FROM port a, vna b WHERE a.vna_id = b.id AND a.uuid = in_port_uuid;
  IF is_exist > 0 THEN
     result.ret := 0;
  ELSE
     result.ret := RTN_ITEM_NO_EXIST; -- no exist item
     return result;     
  END IF;
   
   result.uuid := in_port_uuid;
   SELECT port_type into result.port_type  FROM port WHERE uuid = in_port_uuid;
   SELECT name into result.name  FROM port WHERE uuid = in_port_uuid;
   SELECT state into result.state FROM port WHERE uuid = in_port_uuid;
   SELECT is_broadcast into result.is_broadcast  FROM port WHERE uuid = in_port_uuid;
   SELECT is_running into result.is_running  FROM port WHERE uuid = in_port_uuid;
   SELECT is_multicast into result.is_multicast  FROM port WHERE uuid = in_port_uuid;
   SELECT promiscuous into result.promiscuous  FROM port WHERE uuid = in_port_uuid;
   SELECT mtu into result.mtu  FROM port WHERE uuid = in_port_uuid;
   SELECT is_master into result.is_master  FROM port WHERE uuid = in_port_uuid;
   SELECT admin_state into result.admin_state  FROM port WHERE uuid = in_port_uuid;
   SELECT is_online into result.is_online  FROM port WHERE uuid = in_port_uuid;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_port(character varying) OWNER TO tecs;



-- 查询port summary by vna_uuid, port_name
-- 输出 uuid,name,port_type
CREATE OR REPLACE FUNCTION pf_net_query_port_summary_by_vna_portname(in_vna_uuid character varying,in_port_name character varying)
  RETURNS t_port_summary_query AS
$BODY$
DECLARE
  result  t_port_summary_query;
  is_exist integer;
  vnaid numeric(19,0);
  portid numeric(19,0);
  RTN_ITEM_NO_EXIST integer :=4;
BEGIN
   result.ret := 0;
   SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
   SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
   IF is_exist > 0 THEN
      result.ret := 0;
   ELSE
      result.ret := RTN_ITEM_NO_EXIST; -- no exist item
      return result;     
   END IF;
   
   SELECT count(*) INTO is_exist FROM port WHERE vna_id = vnaid AND name = in_port_name;
   SELECT id INTO portid FROM port WHERE vna_id = vnaid AND name = in_port_name;
   IF is_exist > 0 THEN
      result.ret := 0;
   ELSE
      result.ret := RTN_ITEM_NO_EXIST; -- no exist item
      return result;     
   END IF;
   
   result.vna_uuid := in_vna_uuid;
   result.name := in_port_name;
   SELECT uuid INTO  result.uuid  FROM port WHERE id = portid;
   SELECT port_type INTO  result.port_type  FROM port WHERE id = portid;
   
   return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_port_summary_by_vna_portname(character varying, character varying) OWNER TO tecs;



CREATE OR REPLACE FUNCTION pf_net_check_portname_is_conflict(in_vna_uuid character varying, in_port_name character varying)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  vnaid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
  RTN_PARAM_INVALID integer := 7;
BEGIN
  result := 0;
  -- 入参检查 后面做
          
  --查询是否存在
  SELECT count(*) INTO is_exist FROM port a, vna b WHERE a.name = in_port_name AND a.vna_id = b.id AND b.vna_uuid = in_vna_uuid;
  IF is_exist > 0 THEN 
      result := RTN_ITEM_CONFLICT; 
      return result;
  END IF;

  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_portname_is_conflict(in_vna_uuid character varying, in_port_name character varying ) OWNER TO tecs;

