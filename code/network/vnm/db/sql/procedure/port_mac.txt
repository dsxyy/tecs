






--- 查询 port mac 
--- 输出 name,uuid,
-- Function: pf_net_query_port_mac()

-- DROP FUNCTION pf_net_query_port_mac();

CREATE OR REPLACE FUNCTION pf_net_query_port_mac(in_port_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer;
    portid numeric(19,0);
BEGIN
    SELECT count(*) INTO is_exist FROM port WHERE uuid = in_port_uuid;
    SELECT id INTO portid FROM port WHERE uuid = in_port_uuid;    
    IF is_exist <= 0 THEN 
        return ref;
    END IF;  
    
    OPEN ref FOR SELECT  b.vna_uuid, b.port_uuid, b.port_name, b.port_type , a.mac 
      FROM  port_mac a, v_net_vna_port b WHERE a.port_id = b.port_id AND b.port_uuid = in_port_uuid;
    
    RETURN ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_port_mac( character varying) OWNER TO tecs;


CREATE OR REPLACE FUNCTION pf_net_query_port_mac_by_vna(in_vna_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer;
    portid numeric(19,0);
BEGIN
    SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
    IF is_exist <= 0 THEN 
        return ref;
    END IF;  
    
    OPEN ref FOR SELECT  b.vna_uuid, b.port_uuid, b.port_name, b.port_type, a.mac 
      FROM  port_mac a, v_net_vna_port b WHERE a.port_id = b.port_id AND b.vna_uuid = in_vna_uuid;
    
    RETURN ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_port_mac_by_vna( character varying) OWNER TO tecs;


-- port mac 添加 
-- Function: pf_net_add_port_mac(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_port_mac(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_port_mac(in_port_uuid character varying, in_mac character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_exist integer;
  is_conflict integer;
  portid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否已存在相同记录
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_port_uuid;
  SELECT id INTO portid FROM port WHERE uuid = in_port_uuid;    
  IF is_exist <= 0 THEN 
      result.ret := RTN_ITEM_NO_EXIST;
      return result;
  END IF;   

  -- mac 不做冲突检查
  
  -- insert item
  result.id := nextval('serial_port_mac');
  result.uuid := $1;
  BEGIN 
    INSERT INTO port_mac (id, port_id, mac) values(result.id, portid, in_mac);
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_port_mac(in_port_uuid character varying, in_mac character varying) OWNER TO tecs;



-- 删除port mac
-- Function: pf_net_del_port_mac(character varying)

-- DROP FUNCTION pf_net_del_port_mac(character varying);

CREATE OR REPLACE FUNCTION pf_net_del_port_mac(in_port_uuid character varying, in_mac character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  portid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否存在记录
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_port_uuid;
  SELECT id INTO portid FROM port WHERE uuid = in_port_uuid;    
  IF is_exist <= 0 THEN 
      result.ret := RTN_ITEM_NO_EXIST;
      return result;
  END IF;   
  
  SELECT count(*) INTO is_same FROM port_mac WHERE port_id = portid AND mac = in_mac ;  
  IF is_same <= 0 THEN
     result.ret := RTN_ITEM_NO_EXIST;-- does not exist item
     return result;
  END IF;
    
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM port_mac WHERE port_id = portid AND mac = in_mac;  
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_port_mac(in_port_uuid character varying, in_mac character varying) OWNER TO tecs;



CREATE OR REPLACE FUNCTION pf_net_del_port_mac_by_port(in_port_uuid character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  portid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否存在记录
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_port_uuid;
  SELECT id INTO portid FROM port WHERE uuid = in_port_uuid;    
  IF is_exist <= 0 THEN 
      result.ret := RTN_ITEM_NO_EXIST;
      return result;
  END IF;   
  
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM port_mac WHERE port_id = portid;  
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_port_mac_by_port(in_port_uuid character varying) OWNER TO tecs;

