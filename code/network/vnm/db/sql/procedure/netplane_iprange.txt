


-- 判断逻辑网络IP RANGE 能否添加
CREATE OR REPLACE FUNCTION pf_net_check_add_netplane_iprange(in_uuid character varying, 
                           in_num_begin numeric(19), in_num_end numeric(19),in_num_mask numeric(19),
                           in_str_begin character varying,in_str_end character varying,in_str_mask character varying)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  is_same integer; 
  netplaneid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_SWITCH_MTU_LESS_PG integer := 8;
  RTN_SWITCH_UPLINKPORT_INVALID integer := 9;
  RTN_PORT_HAS_JOIN_OTHER_SWITCH integer := 10;
  RTN_PG_MUST_CFG_NETPLANE   integer := 13;
BEGIN
  result := 0;
  -- 入参检查 后面做
      
  -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  -- begin end 
  IF in_num_begin > in_num_end THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
  
/* 由应用来保准  
  -- ip begin end mask 互相不能重叠  
  SELECT count(*) INTO is_exist FROM ip_range WHERE  netplane_id = netplaneid AND (( in_num_begin >= ip_begin_num AND in_num_begin <= ip_end_num ) OR 
           ( in_num_end >= ip_begin_num AND in_num_end <= ip_end_num ) OR 
           ( in_num_begin <= ip_begin_num AND in_num_end >= ip_end_num ) );  
  IF is_exist > 0 THEN 
     result := RTN_ITEM_CONFLICT; 
     return result;
  END IF;  
*/             
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_add_netplane_iprange(in_uuid character varying, 
                           in_num_begin numeric(19), in_num_end numeric(19),in_num_mask numeric(19),
                           in_str_begin character varying,in_str_end character varying,in_str_mask character varying) OWNER TO tecs;


-- 逻辑网络IP RANGE添加 
-- Function: pf_net_add_netplane_iprange(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_netplane_iprange(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_netplane_iprange(in_uuid character varying, 
                           in_num_begin numeric(19), in_num_end numeric(19),in_num_mask numeric(19),
                           in_str_begin character varying,in_str_end character varying,in_str_mask character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_exist integer;
  is_conflict integer;
  netplaneid numeric(19,0);
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  result.ret := pf_net_check_add_netplane_iprange(in_uuid,in_num_begin,in_num_end,in_num_mask, 
                            in_str_begin,in_str_end,in_str_mask);
  IF result.ret > 0 THEN 
     return result;
  END IF;
  
  -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  -- 不支持重复添加 

  -- insert item 
  result.id := nextval('serial_ip_range');
  --result.uuid := in_uuid;
  BEGIN 
    INSERT INTO ip_range(id,netplane_id,ip_begin,ip_end,mask,ip_begin_num,ip_end_num,mask_num) 
            values(result.id,netplaneid,in_str_begin, in_str_end,in_str_mask,in_num_begin,in_num_end,in_num_mask);
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_netplane_iprange(in_uuid character varying, 
                           in_num_begin numeric(19), in_num_end numeric(19),in_num_mask numeric(19),
                           in_str_begin character varying,in_str_end character varying,in_str_mask character varying) OWNER TO tecs;



                           
     

-- 删除 netplane iprange
CREATE OR REPLACE FUNCTION pf_net_del_netplane_iprange(in_uuid character varying,
                            in_num_begin numeric(19), in_num_end numeric(19),in_num_mask numeric(19),
                           in_str_begin character varying,in_str_end character varying,in_str_mask character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  netplaneid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  -- begin end 
  IF in_num_begin > in_num_end THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
  
  -- del 不作检查，由应用保准
      
  SELECT count(*) INTO is_exist FROM ip_range WHERE netplane_id = netplaneid 
                AND ip_begin_num = in_num_begin AND ip_end_num = in_num_end AND mask_num = in_num_mask 
                AND ip_begin = in_str_begin AND ip_end = in_str_end AND mask = in_str_mask;
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;                
  
  -- 如果逻辑网络在用，不能删除 
  SELECT count(*) INTO is_exist FROM port_group a, logic_network b, logic_network_ip_range c
     WHERE a.netplane_id = netplaneid AND b.vm_pg_id = a.id AND c.logic_network_id = b.id;
  IF is_exist > 0 THEN 
     result.ret := RTN_RESOURCE_USING; 
     return result;
  END IF; 
      
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM ip_range WHERE netplane_id = netplaneid 
                AND ip_begin_num = in_num_begin AND ip_end_num = in_num_end AND mask_num = in_num_mask 
                AND ip_begin = in_str_begin AND ip_end = in_str_end AND mask = in_str_mask;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_netplane_iprange(in_uuid character varying,
                            in_num_begin numeric(19), in_num_end numeric(19),in_num_mask numeric(19),
                           in_str_begin character varying,in_str_end character varying,in_str_mask character varying) OWNER TO tecs;


-- 强制删除 netplane iprange
CREATE OR REPLACE FUNCTION pf_net_force_del_netplane_iprange(in_uuid character varying,
                            in_num_begin numeric(19), in_num_end numeric(19),in_num_mask numeric(19),
                           in_str_begin character varying,in_str_end character varying,in_str_mask character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  netplaneid numeric(19,0);
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- netplane uuid 
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
  IF is_exist <= 0 THEN 
     result := RTN_ITEM_NO_EXIST; 
     return result;
  END IF;  
    
  -- begin end 
  IF in_num_begin > in_num_end THEN 
      result := RTN_PARAM_INVALID; 
      return result;
  END IF;
  
  -- del 不作检查，由应用保正
      
  SELECT count(*) INTO is_exist FROM ip_range WHERE netplane_id = netplaneid 
                AND ip_begin_num = in_num_begin AND ip_end_num = in_num_end AND mask_num = in_num_mask 
                AND ip_begin = in_str_begin AND ip_end = in_str_end AND mask = in_str_mask;
  IF is_exist <= 0 THEN 
     result.ret := RTN_ITEM_NO_EXIST; 
     return result;
  END IF; 
      
  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM ip_range WHERE netplane_id = netplaneid 
                AND ip_begin_num = in_num_begin AND ip_end_num = in_num_end AND mask_num = in_num_mask 
                AND ip_begin = in_str_begin AND ip_end = in_str_end AND mask = in_str_mask;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_force_del_netplane_iprange(in_uuid character varying,
                            in_num_begin numeric(19), in_num_end numeric(19),in_num_mask numeric(19),
                           in_str_begin character varying,in_str_end character varying,in_str_mask character varying) OWNER TO tecs;



-- 查询netplane iprange 是否已经被logicnetwork使用                            
CREATE OR REPLACE FUNCTION pf_net_query_netplane_iprange_is_using(in_netplane_uuid character varying,
                              in_num_begin numeric(19), in_num_end numeric(19) )
 RETURNS t_query_total AS
$BODY$
DECLARE
  result  t_query_total;
  is_conflict integer;
  netplaneid numeric(19,0);
  is_exist integer; 
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_PARAM_INVALID integer := 7;
  RTN_SWITCH_MTU_LESS_PG integer := 8;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- 检查netplane uuid 是否有效
  SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_netplane_uuid;
  SELECT id INTO netplaneid FROM netplane WHERE uuid = in_netplane_uuid;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;  
  
  -- 查询logic network ip range 是否已有分配的
  SELECT count(*)  INTO  result.total_num FROM  v_net_logicnetwork_portgroup_netplane a, logic_network_ip_range b WHERE a.logicnetwork_id = b.logic_network_id 
          AND a.netplane_uuid = in_netplane_uuid AND ( in_num_begin <= b.ip_begin_num AND in_num_end >= b.ip_end_num);
  
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_netplane_iprange_is_using(in_netplane_uuid character varying,
                              in_num_begin numeric(19), in_num_end numeric(19)) OWNER TO tecs;                           

-- 查询iprange(通过netplane uuid)

CREATE OR REPLACE FUNCTION pf_net_query_netplane_iprange(in_uuid character varying)
  RETURNS refcursor AS
$BODY$
DECLARE
    ref refcursor;
    is_exist integer; 
    netplaneid numeric(19,0);
    RTN_ITEM_NO_EXIST integer := 4;
BEGIN
    -- logicnetwork uuid 
    SELECT count(*) INTO is_exist FROM netplane WHERE uuid = in_uuid;
    SELECT id INTO netplaneid FROM netplane WHERE uuid = in_uuid;
    IF is_exist <= 0 THEN 
         --result := RTN_ITEM_NO_EXIST; 
         return ref;
    END IF;  
    
    SELECT count(*) INTO is_exist FROM ip_range  
      WHERE netplane_id = netplaneid;
    IF is_exist <= 0 THEN 
         --result := RTN_ITEM_NO_EXIST; 
         return ref;
    END IF; 
  
    OPEN ref FOR SELECT in_uuid, ip_begin_num,ip_end_num, mask_num, ip_begin, ip_end, mask 
      FROM ip_range  
      WHERE netplane_id = netplaneid;
    
    return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_netplane_iprange(in_uuid character varying) OWNER TO tecs;







                                 