


-- physical port 添加 
-- Function: pf_net_add_phyport(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_add_phyport(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_add_phyport(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer,
        in_is_port_cfg integer, in_is_consistency integer, 
        in_supported_ports character varying, in_supported_link_modes character varying,in_is_support_auto_negotiation integer,
        in_advertised_link_modes character varying,in_advertised_pause_frame_use character varying,in_is_advertised_auto_negotiation integer,
        in_speed character varying,in_duplex character varying,in_port character varying,in_phyad character varying,in_transceiver character varying,
        in_auto_negotiate character varying,in_supports_wake_on character varying,in_wake_on character varying,in_current_msg_level character varying,
        in_is_linked integer,
        in_is_rx_checksumming integer,in_is_tx_checksumming integer, in_is_scatter_gather integer,  in_is_tcp_segmentation_offload integer,
        in_is_udp_fragmentation_offload integer,in_is_generic_segmentation_offload integer,in_is_generic_receive_offload integer, in_is_large_receive_offload integer,
        in_is_sriov integer, in_is_loop_report integer, in_is_loop_cfg integer )
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_same_port integer;
  is_same_port_ex integer;
  is_same_port_sriov integer;
  is_conflict integer;
  vnaid numeric(19,0);
  portid numeric(19,0);
  is_exist integer; 
  db_uuid character varying;
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  
  -- 检查vna uuid 是否有效
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;  
  
  -- 是否已存在相同记录

  SELECT count(*) INTO is_same_port FROM port WHERE port_type = in_type AND vna_id = vnaid  AND name = in_name AND state = in_state 
         AND is_broadcast = in_is_broadcast AND is_running = in_is_running AND is_multicast = in_is_multicast AND promiscuous = in_promiscuous 
         AND mtu = in_mtu AND is_master = in_is_master AND admin_state = in_admin_state AND is_online = in_is_online 
         AND is_cfg = in_is_port_cfg AND is_consistency = in_is_consistency ;
  SELECT id INTO portid FROM port WHERE port_type = in_type AND vna_id = vnaid  AND name = in_name AND state = in_state 
         AND is_broadcast = in_is_broadcast AND is_running = in_is_running AND is_multicast = in_is_multicast AND promiscuous = in_promiscuous 
         AND mtu = in_mtu AND is_master = in_is_master AND admin_state = in_admin_state AND is_online = in_is_online 
         AND is_cfg = in_is_port_cfg AND is_consistency = in_is_consistency ;
  SELECT uuid INTO db_uuid FROM port WHERE port_type = in_type AND vna_id = vnaid  AND name = in_name AND state = in_state 
         AND is_broadcast = in_is_broadcast AND is_running = in_is_running AND is_multicast = in_is_multicast AND promiscuous = in_promiscuous 
         AND mtu = in_mtu AND is_master = in_is_master AND admin_state = in_admin_state AND is_online = in_is_online 
         AND is_cfg = in_is_port_cfg AND is_consistency = in_is_consistency ;         
  IF is_same_port > 0 THEN 
     SELECT count(*) INTO is_same FROM physical_port WHERE port_id = portid AND  port_type = in_type AND vna_id = vnaid  AND supported_ports = in_supported_ports
         AND supported_link_modes = in_supported_link_modes AND  is_support_auto_negotiation = in_is_support_auto_negotiation
         AND advertised_link_modes = in_advertised_link_modes AND advertised_pause_frame_use = in_advertised_pause_frame_use 
         AND is_advertised_auto_negotiation = in_is_advertised_auto_negotiation AND speed = in_speed AND duplex = in_duplex 
         AND port = in_port AND phyad = in_phyad AND transceiver = in_transceiver AND auto_negotiate = in_auto_negotiate 
         AND supports_wake_on = in_supports_wake_on AND wake_on = in_wake_on AND current_msg_level = in_current_msg_level 
         AND is_linked = in_is_linked; 
     IF is_same > 0 THEN
         SELECT count(*) INTO is_same_port_ex FROM physical_port_extend WHERE physical_port_id = portid  
             AND is_rx_checksumming = in_is_rx_checksumming AND is_tx_checksumming = in_is_tx_checksumming AND is_scatter_gather = in_is_scatter_gather 
             AND is_tcp_segmentation_offload = in_is_tcp_segmentation_offload AND is_udp_fragmentation_offload = in_is_udp_fragmentation_offload 
             AND is_generic_segmentation_offload = in_is_generic_segmentation_offload AND is_generic_receive_offload = in_is_generic_receive_offload 
             AND is_large_receive_offload = in_is_large_receive_offload; 
         IF is_same_port_ex > 0 THEN                     
           IF in_is_sriov > 0 THEN      
              SELECT count(*) INTO is_same_port_sriov FROM  sriov_port WHERE physical_port_id = portid AND vna_id = vnaid 
                 AND is_loop_report = in_is_loop_report AND is_loop_cfg = in_is_loop_cfg; 
              IF is_same_port_sriov > 0 THEN     
                 result.ret := RTN_HAS_SAME_ITEM;   -- has same item
                 result.id  := portid;
                 result.uuid := db_uuid;
                 return result;
              ELSE 
                 result.ret := RTN_ITEM_CONFLICT; -- conflict 
                 return result;
              END IF;
           ELSE 
              SELECT count(*) INTO is_exist FROM  sriov_port WHERE physical_port_id = portid AND vna_id = vnaid ;
              IF is_exist > 0 THEN 
                 result.ret := RTN_ITEM_CONFLICT; -- conflict 
                 return result;
              END IF;
           END IF;
         ELSE
           result.ret := RTN_ITEM_CONFLICT; -- conflict 
           return result;
         END IF;
     ELSE
       result.ret := RTN_ITEM_CONFLICT; -- conflict 
       return result;       
     END IF;     
  END IF;

  -- port name 名称是否冲突
  SELECT count(*) INTO is_conflict FROM  port WHERE vna_id = vnaid  AND name = in_name ;
  IF is_conflict > 0 THEN
     result.ret := RTN_ITEM_CONFLICT; -- conflict 
     return result;
  END IF;

  -- insert item
  result.id := nextval('serial_port');
  result.uuid := in_uuid;
  
  BEGIN 
    INSERT INTO port values(result.id,in_type,vnaid,in_name,in_uuid,in_state,in_is_broadcast,in_is_running,in_is_multicast,in_promiscuous,in_mtu,in_is_master,in_admin_state,in_is_online, in_is_port_cfg, in_is_consistency);
    INSERT INTO physical_port values(result.id,in_type,vnaid,in_supported_ports,in_supported_link_modes,in_is_support_auto_negotiation,
        in_advertised_link_modes,in_advertised_pause_frame_use,in_is_advertised_auto_negotiation,
        in_speed,in_duplex,in_port,in_phyad,in_transceiver,in_auto_negotiate,
        in_supports_wake_on,in_wake_on,in_current_msg_level,in_is_linked);
    INSERT INTO physical_port_extend  values(result.id, in_is_rx_checksumming, in_is_tx_checksumming, in_is_scatter_gather, in_is_tcp_segmentation_offload,
        in_is_udp_fragmentation_offload, in_is_generic_segmentation_offload, in_is_generic_receive_offload, in_is_large_receive_offload);
    IF in_is_sriov > 0 THEN
       INSERT INTO sriov_port values(result.id,vnaid,in_is_loop_report, in_is_loop_cfg);
    END IF;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_add_phyport(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer,
        in_is_port_cfg integer, in_is_consistency integer, 
        in_supported_ports character varying, in_supported_link_modes character varying,in_is_support_auto_negotiation integer,
        in_advertised_link_modes character varying,in_advertised_pause_frame_use character varying,in_is_advertised_auto_negotiation integer,
        in_speed character varying,in_duplex character varying,in_port character varying,in_phyad character varying,in_transceiver character varying,
        in_auto_negotiate character varying,in_supports_wake_on character varying,in_wake_on character varying,in_current_msg_level character varying,
        in_is_linked integer,
        in_is_rx_checksumming integer,in_is_tx_checksumming integer, in_is_scatter_gather integer,  in_is_tcp_segmentation_offload integer,
        in_is_udp_fragmentation_offload integer,in_is_generic_segmentation_offload integer,in_is_generic_receive_offload integer, in_is_large_receive_offload integer,
        in_is_sriov integer, in_is_loop_report integer, in_is_loop_cfg integer ) OWNER TO tecs;



		
		
-- port修改
-- Function: pf_net_modify_phyport(character varying, character varying, character varying, integer)

-- DROP FUNCTION pf_net_modify_phyport(character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION pf_net_modify_phyport(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer,
        in_is_port_cfg integer, in_is_consistency integer, 
        in_supported_ports character varying, in_supported_link_modes character varying,in_is_support_auto_negotiation integer,
        in_advertised_link_modes character varying,in_advertised_pause_frame_use character varying,in_is_advertised_auto_negotiation integer,
        in_speed character varying,in_duplex character varying,in_port character varying,in_phyad character varying,in_transceiver character varying,
        in_auto_negotiate character varying,in_supports_wake_on character varying,in_wake_on character varying,in_current_msg_level character varying,
        in_is_linked integer,
        in_is_rx_checksumming integer,in_is_tx_checksumming integer, in_is_scatter_gather integer,  in_is_tcp_segmentation_offload integer,
        in_is_udp_fragmentation_offload integer,in_is_generic_segmentation_offload integer,in_is_generic_receive_offload integer, in_is_large_receive_offload integer,
        in_is_sriov integer, in_is_loop_report integer, in_is_loop_cfg integer )
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  vnaid numeric(19,0);
  portid numeric(19,0);
  is_sriov_exist integer;
  oldIsConsistency integer := 0;
  oldIsCfgLoop integer := 0;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_NETPLANE_MTU_LESS_PG  integer := 5;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做  
  -- 检查vna uuid 是否有效
  SELECT count(*) INTO is_exist FROM vna WHERE vna_uuid = in_vna_uuid;
  SELECT id INTO vnaid FROM vna WHERE vna_uuid = in_vna_uuid;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;  
  
  -- 检查port uuid 是否有效
  SELECT count(*) INTO is_exist FROM port WHERE uuid = in_uuid AND port_type = in_type;
  SELECT id INTO portid FROM port WHERE uuid = in_uuid AND port_type = in_type;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;   
  
  SELECT count(*) INTO is_exist FROM physical_port WHERE port_id = portid AND port_type = in_type;
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;  
           
  -- port name 
  SELECT count(*) INTO is_exist FROM port WHERE vna_id = vnaid AND name = in_name AND uuid = in_uuid;
  SELECT is_consistency INTO oldIsConsistency FROM port WHERE vna_id = vnaid AND name = in_name AND uuid = in_uuid;  
  IF is_exist <= 0 THEN
     SELECT count(*) INTO is_exist FROM port WHERE vna_id = vnaid AND name = in_name ;
     IF is_exist > 0 THEN
       result.ret := RTN_ITEM_CONFLICT;-- 
       return result;          
     END IF;
  END IF;  
           
  -- sriov 网口，如果已经有虚拟机部署了，是否环回不能修改 
  -- db 单独提供接口，由PORT模块调用判断 
           
  -- modify item
  result.id  := portid;
  result.uuid := in_uuid;
  BEGIN 
    UPDATE port SET name = in_name, state = in_state, is_broadcast =in_is_broadcast, is_multicast = in_is_multicast,
        promiscuous = in_promiscuous, mtu = in_mtu, is_master = in_is_master, admin_state = in_admin_state, is_online = in_is_online, 
        is_cfg = in_is_port_cfg , is_consistency = in_is_consistency 
        WHERE uuid = in_uuid AND port_type = in_type;
    UPDATE physical_port SET supported_ports = in_supported_ports, supported_link_modes = in_supported_link_modes, 
        is_support_auto_negotiation = in_is_support_auto_negotiation,advertised_link_modes = in_advertised_link_modes ,
        advertised_pause_frame_use = in_advertised_pause_frame_use,is_advertised_auto_negotiation = in_is_advertised_auto_negotiation ,
        speed = in_speed,duplex = in_duplex,port = in_port , phyad = in_phyad,transceiver = in_transceiver,auto_negotiate = in_auto_negotiate,
        supports_wake_on = in_supports_wake_on,wake_on = in_wake_on ,current_msg_level = in_current_msg_level,is_linked = in_is_linked 
        WHERE port_id = portid AND vna_id = vnaid AND port_type = in_type;    
    UPDATE physical_port_extend SET is_rx_checksumming = in_is_rx_checksumming, is_tx_checksumming = in_is_tx_checksumming,
        is_scatter_gather = in_is_scatter_gather, is_tcp_segmentation_offload = in_is_tcp_segmentation_offload,
        is_udp_fragmentation_offload = in_is_udp_fragmentation_offload, is_generic_segmentation_offload = in_is_generic_segmentation_offload, 
        is_generic_receive_offload = in_is_generic_receive_offload, is_large_receive_offload = in_is_large_receive_offload
        WHERE physical_port_id = portid;
    
    SELECT count(*) INTO is_sriov_exist FROM sriov_port WHERE physical_port_id = portid AND vna_id = vnaid;    
    IF is_sriov_exist > 0 THEN 
       IF in_is_sriov > 0 THEN 
          UPDATE sriov_port SET is_loop_report = in_is_loop_report, is_loop_cfg = in_is_loop_cfg WHERE physical_port_id = portid AND vna_id = vnaid;    
       ELSE
          DELETE FROM sriov_port WHERE physical_port_id = portid;    
       END IF;
    ELSE 
       IF in_is_sriov > 0 THEN
          INSERT INTO sriov_port values(portid,vnaid,in_is_loop_report, in_is_loop_cfg);
       END IF;
    END IF;
    
    -- trigger 
    -- 1 从sriov->sriov 
    ---  1.1 consistency change, 根据old状态和new状态 来决定调用pf_net_tr_modify_sriovport(portid,) 入参是0还是1
    -- 2 从非sriov->非sriov ， 无需操作
    -- 3 sriov->非sriov
    --   3.1 如果oldconsistency = 1, 则需要调用 pf_net_tr_sriovport_change_phyport(portid) ， 同时将
    -- 4 非sriov->sriov 
    --     
    IF is_sriov_exist > 0 THEN 
       IF in_is_sriov > 0 THEN 
          IF oldIsConsistency > in_is_consistency THEN 
              result.ret := pf_net_tr_modify_sriovport(portid, 0);
          END IF;
          IF oldIsConsistency < in_is_consistency THEN 
              result.ret := pf_net_tr_modify_sriovport(portid, 1);
             END IF;
       ELSE  -- sriov --> 非SRIOV，仅仅改变free_sriov_num 效果和is_consistency 变化一样
           IF oldIsConsistency  > 0 THEN 
              result.ret := pf_net_tr_sriovport_change_phyport(portid);
           END IF;
       END IF;
    ELSE 
       IF in_is_sriov > 0 THEN
          
       END IF;
    END IF;
            
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_modify_phyport(in_vna_uuid character varying, in_type integer,in_name character varying,
        in_uuid character varying, in_state integer, in_is_broadcast integer,in_is_running integer,in_is_multicast integer,
        in_promiscuous integer, in_mtu integer, in_is_master integer, in_admin_state integer, in_is_online integer,
        in_is_port_cfg integer, in_is_consistency integer, 
        in_supported_ports character varying, in_supported_link_modes character varying,in_is_support_auto_negotiation integer,
        in_advertised_link_modes character varying,in_advertised_pause_frame_use character varying,in_is_advertised_auto_negotiation integer,
        in_speed character varying,in_duplex character varying,in_port character varying,in_phyad character varying,in_transceiver character varying,
        in_auto_negotiate character varying,in_supports_wake_on character varying,in_wake_on character varying,in_current_msg_level character varying,
        in_is_linked integer,
        in_is_rx_checksumming integer,in_is_tx_checksumming integer, in_is_scatter_gather integer,in_is_tcp_segmentation_offload integer,
        in_is_udp_fragmentation_offload integer,in_is_generic_segmentation_offload integer,in_is_generic_receive_offload integer, in_is_large_receive_offload integer,
        in_is_sriov integer, in_is_loop_report integer, in_is_loop_cfg integer ) OWNER TO tecs;


-- 删除port

CREATE OR REPLACE FUNCTION pf_net_del_phyport(in_port_uuid character varying)
  RETURNS t_operate_result AS
$BODY$
DECLARE
  result  t_operate_result;
  is_same integer;
  is_exist integer;
  RTN_OPERATOR_FAILED integer := 1;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
BEGIN
  result.ret := 0;
  -- 入参检查 后面做
  -- 是否存在记录
  SELECT count(*) INTO is_exist FROM port a, physical_port b WHERE a.id = b.port_id AND a.port_type = b.port_type AND a.uuid = in_port_uuid ;  
  IF is_exist <= 0 THEN
     result.ret := RTN_ITEM_NO_EXIST;-- does not exist item
     return result;
  END IF;

  -- del item
  result.ret := 0;
  BEGIN 
    DELETE FROM port WHERE uuid = in_port_uuid ;
  EXCEPTION 
    WHEN others
    THEN
    result.ret := RTN_OPERATOR_FAILED;
  END;
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_del_phyport(character varying) OWNER TO tecs;


--- 查询phy port summary
--- 输出 name,uuid
-- Function: pf_net_query_phyport_summary()

-- DROP FUNCTION pf_net_query_phyport_summary();

CREATE OR REPLACE FUNCTION pf_net_query_phyport_summary(in_vna_uuid character varying, in_is_sriov integer)
  RETURNS refcursor AS
$BODY$
DECLARE
        ref refcursor;
BEGIN
      IF in_is_sriov > 0 THEN 
          OPEN ref FOR SELECT b.vna_uuid, a.name, a.uuid , a.port_type FROM port a, vna b, physical_port c, sriov_port d WHERE a.vna_id = b.id AND b.vna_uuid = in_vna_uuid 
                AND c.port_id = a.id AND c.port_type = a.port_type AND c.vna_id = a.vna_id 
                AND d.physical_port_id = c.port_id AND d.vna_id = c.vna_id ;
      ELSE
          OPEN ref FOR SELECT b.vna_uuid, a.name, a.uuid , a.port_type  FROM port a, vna b, physical_port c WHERE a.vna_id = b.id AND b.vna_uuid = in_vna_uuid 
                AND c.port_id = a.id AND c.port_type = a.port_type AND c.vna_id = a.vna_id                      
                AND a.id not in (select physical_port_id from sriov_port);
      END IF;
      return ref;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_phyport_summary(character varying,integer) OWNER TO tecs;



-- 查询port 
-- 输出 uuid,name,description,mtu
-- Function: pf_net_query_phyport(character varying)

-- DROP FUNCTION pf_net_query_phyport(character varying);

CREATE OR REPLACE FUNCTION pf_net_query_phyport(in_port_uuid character varying)
  RETURNS t_phyport_query AS
$BODY$
DECLARE
  result  t_phyport_query;
  is_exist integer;
  portid numeric(19,0);
  RTN_ITEM_NO_EXIST integer :=4;
BEGIN
--  SELECT uuid into result.uuid, name into result.name,description into result.description,mtu into result.mtu FROM netplane WHERE uuid = $1;
  result.ret := 0;
  SELECT count(*) INTO is_exist FROM port a, vna b, physical_port c WHERE a.vna_id = b.id AND a.uuid = in_port_uuid AND
             c.port_id = a.id AND c.port_type = a.port_type AND c.vna_id = a.vna_id;
  SELECT b.vna_uuid INTO result.vna_uuid FROM port a, vna b WHERE a.vna_id = b.id AND a.uuid = in_port_uuid;
  SELECT b.port_id INTO portid FROM port a, physical_port b WHERE a.id = b.port_id AND a.uuid = in_port_uuid;
  IF is_exist > 0 THEN
     result.ret := 0;
  ELSE
     result.ret := RTN_ITEM_NO_EXIST; -- no exist item
     return result;     
  END IF;
   
   result.uuid := in_port_uuid;
   -- port 
   SELECT port_type into result.port_type  FROM port WHERE uuid = in_port_uuid;
   SELECT name into result.name  FROM port WHERE uuid = in_port_uuid;
   SELECT state into result.state FROM port WHERE uuid = in_port_uuid;
   SELECT is_broadcast into result.is_broadcast  FROM port WHERE uuid = in_port_uuid;
   SELECT is_running into result.is_running  FROM port WHERE uuid = in_port_uuid;
   SELECT is_multicast into result.is_multicast  FROM port WHERE uuid = in_port_uuid;
   SELECT promiscuous into result.promiscuous  FROM port WHERE uuid = in_port_uuid;
   SELECT mtu into result.mtu  FROM port WHERE uuid = in_port_uuid;
   SELECT is_master into result.is_master  FROM port WHERE uuid = in_port_uuid;
   SELECT admin_state into result.admin_state  FROM port WHERE uuid = in_port_uuid;
   SELECT is_online into result.is_online  FROM port WHERE uuid = in_port_uuid;
   SELECT is_cfg into result.is_port_cfg  FROM port WHERE uuid = in_port_uuid;
   SELECT is_consistency into result.is_consistency  FROM port WHERE uuid = in_port_uuid;
       
   -- physical port 
   SELECT port_type into result.port_type  FROM physical_port WHERE port_id = portid;
   SELECT supported_ports into result.supported_ports  FROM physical_port WHERE port_id = portid;
   SELECT supported_link_modes into result.supported_link_modes FROM physical_port WHERE port_id = portid;
   SELECT is_support_auto_negotiation into result.is_support_auto_negotiation  FROM physical_port WHERE port_id = portid;
   SELECT advertised_link_modes into result.advertised_link_modes  FROM physical_port WHERE port_id = portid;
   SELECT advertised_pause_frame_use into result.advertised_pause_frame_use  FROM physical_port WHERE port_id = portid;
   SELECT is_advertised_auto_negotiation into result.is_advertised_auto_negotiation  FROM physical_port WHERE port_id = portid;
   SELECT speed into result.speed  FROM physical_port WHERE port_id = portid;
   SELECT duplex into result.duplex  FROM physical_port WHERE port_id = portid;
   SELECT port into result.port  FROM physical_port WHERE port_id = portid;
   SELECT phyad into result.phyad  FROM physical_port WHERE port_id = portid;
   SELECT transceiver into result.transceiver  FROM physical_port WHERE port_id = portid;
   SELECT auto_negotiate into result.auto_negotiate  FROM physical_port WHERE port_id = portid;
   SELECT supports_wake_on into result.supports_wake_on  FROM physical_port WHERE port_id = portid;
   SELECT wake_on into result.wake_on  FROM physical_port WHERE port_id = portid;
   SELECT current_msg_level into result.current_msg_level  FROM physical_port WHERE port_id = portid;
   SELECT is_linked into result.is_linked  FROM physical_port WHERE port_id = portid;
   
   -- physical port extend 
   SELECT is_rx_checksumming into result.is_rx_checksumming  FROM physical_port_extend WHERE physical_port_id = portid;
   SELECT is_tx_checksumming into result.is_tx_checksumming  FROM physical_port_extend WHERE physical_port_id = portid;
   SELECT is_scatter_gather into result.is_scatter_gather  FROM physical_port_extend WHERE physical_port_id = portid;
   SELECT is_tcp_segmentation_offload into result.is_tcp_segmentation_offload  FROM physical_port_extend WHERE physical_port_id = portid;
   SELECT is_udp_fragmentation_offload into result.is_udp_fragmentation_offload  FROM physical_port_extend WHERE physical_port_id = portid;
   SELECT is_generic_segmentation_offload into result.is_generic_segmentation_offload  FROM physical_port_extend WHERE physical_port_id = portid;
   SELECT is_generic_receive_offload into result.is_generic_receive_offload  FROM physical_port_extend WHERE physical_port_id = portid;
   SELECT is_large_receive_offload into result.is_large_receive_offload  FROM physical_port_extend WHERE physical_port_id = portid;
   
   -- sriov
   SELECT count(*) INTO is_exist FROM sriov_port WHERE physical_port_id = portid;
   IF is_exist > 0 THEN 
      result.is_sriov := 1;
      SELECT is_loop_report INTO result.is_loop_report FROM sriov_port WHERE physical_port_id = portid;
      SELECT is_loop_cfg INTO result.is_loop_cfg FROM sriov_port WHERE physical_port_id = portid;
   ELSE
      result.is_sriov := 0;
   END IF;   
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_query_phyport(character varying) OWNER TO tecs;



-- 判断SRIOV网口下是否已经有虚拟机部署使用sriov vf了
CREATE OR REPLACE FUNCTION pf_net_query_sriovport_vsi_num(in_uuid character varying )
  RETURNS t_query_total AS
$BODY$
DECLARE
  result  t_query_total;
  is_same integer;
  is_same_port integer;
  is_same_port_ex integer;
  is_same_port_sriov integer;
  is_conflict integer;
  portid numeric(19,0);
  is_exist integer; 
  db_uuid character varying;
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  
BEGIN
  result.ret := 0;
  result.total_num := 0;
  -- 入参检查 后面做
  
  -- 检查port uuid 是否有效
  SELECT count(*) INTO is_exist FROM port a, sriov_port b WHERE a.id = b.physical_port_id AND a.uuid = in_uuid;
  SELECT a.id INTO portid FROM port a, sriov_port b WHERE a.id = b.physical_port_id AND a.uuid = in_uuid;  
  IF is_exist <= 0 THEN 
    result.ret := RTN_ITEM_NO_EXIST;   -- item has not exist. 
    return result;
  END IF;  
  
  -- 是否已存在相同记录
  SELECT count(*) INTO result.total_num FROM sriov_vf_port a, vsi_sriov b WHERE a.port_id = b.sriov_vf_port_id AND a.sriov_port_id = portid; 
  
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION  pf_net_query_sriovport_vsi_num(in_uuid character varying ) OWNER TO tecs;


-- 判断能否设置sriov 环回属性 
CREATE OR REPLACE FUNCTION pf_net_check_sriovport_loopback(in_uuid character 
varying, in_is_loop integer)
 RETURNS integer AS
$BODY$
DECLARE
  result  integer;
  is_conflict integer;
  is_exist integer; 
  portid numeric(19,0);
  bondid numeric(19,0);  
  switchid numeric(19,0);   
  vnaid numeric(19,0);
  pg_mtu integer;
  portname character varying;
  -- 错误返回码定义
  RTN_OPERATOR_FAILED integer := 1;
  RTN_HAS_SAME_ITEM integer := 2;
  RTN_ITEM_CONFLICT integer := 3;
  RTN_ITEM_NO_EXIST integer := 4;
  RTN_RESOURCE_USING integer := 6;
  RTN_PARAM_INVALID integer := 7;
  RTN_SWITCH_MTU_LESS_PG integer := 8;
BEGIN
  result := 0;
  -- 入参检查 后面做
  
  -- 检查port uuid 是否有效
  SELECT count(*) INTO is_exist FROM port a, sriov_port b WHERE a.uuid = in_uuid AND a.id = b.physical_port_id;
  SELECT a.vna_id INTO vnaid FROM port a, sriov_port b WHERE a.uuid = in_uuid AND a.id = b.physical_port_id;  
  SELECT a.id INTO portid FROM port a, sriov_port b WHERE a.uuid = in_uuid AND a.id = b.physical_port_id;
  SELECT a.name INTO portname FROM port a, sriov_port b WHERE a.uuid = in_uuid AND a.id = b.physical_port_id;
  IF is_exist <= 0 THEN 
    result := RTN_ITEM_NO_EXIST;   -- item has not exist.
    return result;
  END IF;  

  -- 检查该网口下是否存在VM 使用VF
  SELECT count(*) INTO is_exist FROM sriov_vf_port a, vsi_sriov b WHERE 
  a.port_id  = b.sriov_vf_port_id AND a.sriov_port_id = portid;
  IF is_exist > 0 THEN 
      result := RTN_RESOURCE_USING;   -- vm using
      return result;
  END IF;

  /* 取消环回，没有这么多限制*/
  IF in_is_loop <= 0 THEN 
      result := 0;
      return result;
  END IF;

  -- 检查port是否加入了bond，加入bond后，不能修改其环回属性
  SELECT count(*) INTO is_exist FROM bond_map WHERE physical_port_id = portid; 
  IF is_exist > 0 THEN 
    result := RTN_PARAM_INVALID;   -- item has not exist.
    return result;
  END IF; 
    
  -- port 
  SELECT count(*) INTO is_exist FROM virtual_switch_map WHERE port_id = portid;
  -- > 1 说明存在EDVS SDVS 混用
  IF is_exist > 1 THEN 
      result := RTN_PARAM_INVALID;   
      return result;
  END IF;
    
  -- 检查port --> switch 是否已配置其他vna   
  SELECT count(*) INTO is_exist FROM virtual_switch_map WHERE port_id = portid;
  SELECT virtual_switch_id INTO switchid FROM virtual_switch_map WHERE port_id = portid;
  IF is_exist <= 0 THEN 
    result := 0;   
    return result;
  ELSE
      SELECT count(*) INTO is_exist FROM virtual_switch_map WHERE virtual_switch_id =  switchid;
      -- > 1 说明存在其他VNA加入此switch 
      IF is_exist > 1 THEN 
         result := RTN_PARAM_INVALID;   
         return result;
      END IF;      
  END IF;


  -- 检查是否存在同一个VNA下的 kernel 接入到此switch中 
  SELECT count(*) INTO is_exist FROM kernel_port WHERE vna_id = vnaid AND virtual_switch_id = switchid;
  IF is_exist > 0 THEN 
     result := RTN_PARAM_INVALID;   
     return result;
  END IF;
  
  -- 如果该网口已经加入SDVS 就不能再设置为loop
  SELECT count(*) INTO is_exist FROM virtual_switch_map a, virtual_switch b 
  WHERE a.virtual_switch_id = b.switch_id AND b.switch_type = 1 AND 
  a.port_id = port_id;
  IF is_exist > 0 THEN 
    result := RTN_PARAM_INVALID;   
    return result;
  END IF;
  
  /*如果该网口已经加入 wildcast switch task, wildcast loop task, 
  也将不能进行loop设置 */
  SELECT count(*) INTO is_exist 
  FROM wildcast_task_loopback a, 
  wildcast_cfg_loopback_port b 
  WHERE 
     a.wildcast_cfg_loopback_port_id = b.id AND 
     b.vna_id = vnaid AND 
     b.port_name = portname; 
  IF is_exist > 0 THEN      
     result := RTN_ITEM_CONFLICT;   
    return result;
  END IF;

  /* switch port name 存在两个地方 仅对BOND口需限制 */
  SELECT count(*) INTO is_exist 
  FROM wildcast_task_switch a, 
  wildcast_cfg_switch_bond_map b 
  WHERE 
     a.wildcast_cfg_switch_id = b.wildcast_cfg_bond_id AND 
     b.vna_id = vnaid AND 
     b.phy_port_name = portname; 
  IF is_exist > 0 THEN      
     result := RTN_ITEM_CONFLICT;   
    return result;
  END IF;
  
  return result;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION pf_net_check_sriovport_loopback(in_uuid character varying, in_is_loop integer) OWNER TO tecs;


